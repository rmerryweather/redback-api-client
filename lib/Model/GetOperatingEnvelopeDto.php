<?php
/**
 * GetOperatingEnvelopeDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Redback API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 * Contact: ITOps@redbacktech.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.64
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * GetOperatingEnvelopeDto Class Doc Comment
 *
 * @category Class
 * @description Operating Envelope
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GetOperatingEnvelopeDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'GetOperatingEnvelopeDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'event_id' => 'string',
        'nmi' => 'string',
        'site_id' => 'string',
        'start_at_utc' => '\DateTime',
        'end_at_utc' => '\DateTime',
        'max_import_power_w' => 'int',
        'max_export_power_w' => 'int',
        'max_discharge_power_w' => 'int',
        'max_charge_power_w' => 'int',
        'max_generation_power_va' => 'int',
        'is_network_level' => 'bool',
        'reported_start_utc' => '\DateTime',
        'reported_finish_utc' => '\DateTime',
        'status' => '\Swagger\Client\Model\OperatingEnvelopeStatus'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'event_id' => null,
        'nmi' => null,
        'site_id' => null,
        'start_at_utc' => 'date-time',
        'end_at_utc' => 'date-time',
        'max_import_power_w' => 'int32',
        'max_export_power_w' => 'int32',
        'max_discharge_power_w' => 'int32',
        'max_charge_power_w' => 'int32',
        'max_generation_power_va' => 'int32',
        'is_network_level' => null,
        'reported_start_utc' => 'date-time',
        'reported_finish_utc' => 'date-time',
        'status' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'event_id' => 'EventId',
        'nmi' => 'Nmi',
        'site_id' => 'SiteId',
        'start_at_utc' => 'StartAtUtc',
        'end_at_utc' => 'EndAtUtc',
        'max_import_power_w' => 'MaxImportPowerW',
        'max_export_power_w' => 'MaxExportPowerW',
        'max_discharge_power_w' => 'MaxDischargePowerW',
        'max_charge_power_w' => 'MaxChargePowerW',
        'max_generation_power_va' => 'MaxGenerationPowerVA',
        'is_network_level' => 'IsNetworkLevel',
        'reported_start_utc' => 'ReportedStartUtc',
        'reported_finish_utc' => 'ReportedFinishUtc',
        'status' => 'Status'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'event_id' => 'setEventId',
        'nmi' => 'setNmi',
        'site_id' => 'setSiteId',
        'start_at_utc' => 'setStartAtUtc',
        'end_at_utc' => 'setEndAtUtc',
        'max_import_power_w' => 'setMaxImportPowerW',
        'max_export_power_w' => 'setMaxExportPowerW',
        'max_discharge_power_w' => 'setMaxDischargePowerW',
        'max_charge_power_w' => 'setMaxChargePowerW',
        'max_generation_power_va' => 'setMaxGenerationPowerVa',
        'is_network_level' => 'setIsNetworkLevel',
        'reported_start_utc' => 'setReportedStartUtc',
        'reported_finish_utc' => 'setReportedFinishUtc',
        'status' => 'setStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'event_id' => 'getEventId',
        'nmi' => 'getNmi',
        'site_id' => 'getSiteId',
        'start_at_utc' => 'getStartAtUtc',
        'end_at_utc' => 'getEndAtUtc',
        'max_import_power_w' => 'getMaxImportPowerW',
        'max_export_power_w' => 'getMaxExportPowerW',
        'max_discharge_power_w' => 'getMaxDischargePowerW',
        'max_charge_power_w' => 'getMaxChargePowerW',
        'max_generation_power_va' => 'getMaxGenerationPowerVa',
        'is_network_level' => 'getIsNetworkLevel',
        'reported_start_utc' => 'getReportedStartUtc',
        'reported_finish_utc' => 'getReportedFinishUtc',
        'status' => 'getStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['event_id'] = isset($data['event_id']) ? $data['event_id'] : null;
        $this->container['nmi'] = isset($data['nmi']) ? $data['nmi'] : null;
        $this->container['site_id'] = isset($data['site_id']) ? $data['site_id'] : null;
        $this->container['start_at_utc'] = isset($data['start_at_utc']) ? $data['start_at_utc'] : null;
        $this->container['end_at_utc'] = isset($data['end_at_utc']) ? $data['end_at_utc'] : null;
        $this->container['max_import_power_w'] = isset($data['max_import_power_w']) ? $data['max_import_power_w'] : null;
        $this->container['max_export_power_w'] = isset($data['max_export_power_w']) ? $data['max_export_power_w'] : null;
        $this->container['max_discharge_power_w'] = isset($data['max_discharge_power_w']) ? $data['max_discharge_power_w'] : null;
        $this->container['max_charge_power_w'] = isset($data['max_charge_power_w']) ? $data['max_charge_power_w'] : null;
        $this->container['max_generation_power_va'] = isset($data['max_generation_power_va']) ? $data['max_generation_power_va'] : null;
        $this->container['is_network_level'] = isset($data['is_network_level']) ? $data['is_network_level'] : null;
        $this->container['reported_start_utc'] = isset($data['reported_start_utc']) ? $data['reported_start_utc'] : null;
        $this->container['reported_finish_utc'] = isset($data['reported_finish_utc']) ? $data['reported_finish_utc'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['start_at_utc'] === null) {
            $invalidProperties[] = "'start_at_utc' can't be null";
        }
        if ($this->container['end_at_utc'] === null) {
            $invalidProperties[] = "'end_at_utc' can't be null";
        }
        if ($this->container['is_network_level'] === null) {
            $invalidProperties[] = "'is_network_level' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets event_id
     *
     * @return string
     */
    public function getEventId()
    {
        return $this->container['event_id'];
    }

    /**
     * Sets event_id
     *
     * @param string $event_id Event Id.
     *
     * @return $this
     */
    public function setEventId($event_id)
    {
        $this->container['event_id'] = $event_id;

        return $this;
    }

    /**
     * Gets nmi
     *
     * @return string
     */
    public function getNmi()
    {
        return $this->container['nmi'];
    }

    /**
     * Sets nmi
     *
     * @param string $nmi Nmi
     *
     * @return $this
     */
    public function setNmi($nmi)
    {
        $this->container['nmi'] = $nmi;

        return $this;
    }

    /**
     * Gets site_id
     *
     * @return string
     */
    public function getSiteId()
    {
        return $this->container['site_id'];
    }

    /**
     * Sets site_id
     *
     * @param string $site_id Site Id
     *
     * @return $this
     */
    public function setSiteId($site_id)
    {
        $this->container['site_id'] = $site_id;

        return $this;
    }

    /**
     * Gets start_at_utc
     *
     * @return \DateTime
     */
    public function getStartAtUtc()
    {
        return $this->container['start_at_utc'];
    }

    /**
     * Sets start_at_utc
     *
     * @param \DateTime $start_at_utc Start
     *
     * @return $this
     */
    public function setStartAtUtc($start_at_utc)
    {
        $this->container['start_at_utc'] = $start_at_utc;

        return $this;
    }

    /**
     * Gets end_at_utc
     *
     * @return \DateTime
     */
    public function getEndAtUtc()
    {
        return $this->container['end_at_utc'];
    }

    /**
     * Sets end_at_utc
     *
     * @param \DateTime $end_at_utc End
     *
     * @return $this
     */
    public function setEndAtUtc($end_at_utc)
    {
        $this->container['end_at_utc'] = $end_at_utc;

        return $this;
    }

    /**
     * Gets max_import_power_w
     *
     * @return int
     */
    public function getMaxImportPowerW()
    {
        return $this->container['max_import_power_w'];
    }

    /**
     * Sets max_import_power_w
     *
     * @param int $max_import_power_w Max Import Power W
     *
     * @return $this
     */
    public function setMaxImportPowerW($max_import_power_w)
    {
        $this->container['max_import_power_w'] = $max_import_power_w;

        return $this;
    }

    /**
     * Gets max_export_power_w
     *
     * @return int
     */
    public function getMaxExportPowerW()
    {
        return $this->container['max_export_power_w'];
    }

    /**
     * Sets max_export_power_w
     *
     * @param int $max_export_power_w Max Export Power W
     *
     * @return $this
     */
    public function setMaxExportPowerW($max_export_power_w)
    {
        $this->container['max_export_power_w'] = $max_export_power_w;

        return $this;
    }

    /**
     * Gets max_discharge_power_w
     *
     * @return int
     */
    public function getMaxDischargePowerW()
    {
        return $this->container['max_discharge_power_w'];
    }

    /**
     * Sets max_discharge_power_w
     *
     * @param int $max_discharge_power_w Max Discharge Power in W
     *
     * @return $this
     */
    public function setMaxDischargePowerW($max_discharge_power_w)
    {
        $this->container['max_discharge_power_w'] = $max_discharge_power_w;

        return $this;
    }

    /**
     * Gets max_charge_power_w
     *
     * @return int
     */
    public function getMaxChargePowerW()
    {
        return $this->container['max_charge_power_w'];
    }

    /**
     * Sets max_charge_power_w
     *
     * @param int $max_charge_power_w Max Charge Power in W
     *
     * @return $this
     */
    public function setMaxChargePowerW($max_charge_power_w)
    {
        $this->container['max_charge_power_w'] = $max_charge_power_w;

        return $this;
    }

    /**
     * Gets max_generation_power_va
     *
     * @return int
     */
    public function getMaxGenerationPowerVa()
    {
        return $this->container['max_generation_power_va'];
    }

    /**
     * Sets max_generation_power_va
     *
     * @param int $max_generation_power_va Max Generation Power in VA
     *
     * @return $this
     */
    public function setMaxGenerationPowerVa($max_generation_power_va)
    {
        $this->container['max_generation_power_va'] = $max_generation_power_va;

        return $this;
    }

    /**
     * Gets is_network_level
     *
     * @return bool
     */
    public function getIsNetworkLevel()
    {
        return $this->container['is_network_level'];
    }

    /**
     * Sets is_network_level
     *
     * @param bool $is_network_level True if the operating envelope is scheduled by the energy network
     *
     * @return $this
     */
    public function setIsNetworkLevel($is_network_level)
    {
        $this->container['is_network_level'] = $is_network_level;

        return $this;
    }

    /**
     * Gets reported_start_utc
     *
     * @return \DateTime
     */
    public function getReportedStartUtc()
    {
        return $this->container['reported_start_utc'];
    }

    /**
     * Sets reported_start_utc
     *
     * @param \DateTime $reported_start_utc Reported time of when the operating envelope was applied
     *
     * @return $this
     */
    public function setReportedStartUtc($reported_start_utc)
    {
        $this->container['reported_start_utc'] = $reported_start_utc;

        return $this;
    }

    /**
     * Gets reported_finish_utc
     *
     * @return \DateTime
     */
    public function getReportedFinishUtc()
    {
        return $this->container['reported_finish_utc'];
    }

    /**
     * Sets reported_finish_utc
     *
     * @param \DateTime $reported_finish_utc Time when the operating envelope stopped being applied
     *
     * @return $this
     */
    public function setReportedFinishUtc($reported_finish_utc)
    {
        $this->container['reported_finish_utc'] = $reported_finish_utc;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \Swagger\Client\Model\OperatingEnvelopeStatus
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \Swagger\Client\Model\OperatingEnvelopeStatus $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
