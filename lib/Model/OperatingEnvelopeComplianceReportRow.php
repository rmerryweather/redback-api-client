<?php
/**
 * OperatingEnvelopeComplianceReportRow
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Redback API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 * Contact: ITOps@redbacktech.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.64
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * OperatingEnvelopeComplianceReportRow Class Doc Comment
 *
 * @category Class
 * @description Data describing a single system in the compliance report
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OperatingEnvelopeComplianceReportRow implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'OperatingEnvelopeComplianceReportRow';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'nmi' => 'string',
        'site_id' => 'string',
        'site_power_w' => 'int',
        'last_connection_utc' => '\DateTime',
        'address_line_one' => 'string',
        'address_line_two' => 'string',
        'state' => 'string',
        'post_code' => 'string',
        'suburb' => 'string',
        'site_export_limit_enabled' => 'bool',
        'site_export_limit_w' => 'int',
        'is_disconnected' => 'string',
        'is_online' => 'string',
        'generation_status' => 'string',
        'comment' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'nmi' => null,
        'site_id' => null,
        'site_power_w' => 'int32',
        'last_connection_utc' => 'date-time',
        'address_line_one' => null,
        'address_line_two' => null,
        'state' => null,
        'post_code' => null,
        'suburb' => null,
        'site_export_limit_enabled' => null,
        'site_export_limit_w' => 'int32',
        'is_disconnected' => null,
        'is_online' => null,
        'generation_status' => null,
        'comment' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'nmi' => 'NMI',
        'site_id' => 'SiteId',
        'site_power_w' => 'SitePowerW',
        'last_connection_utc' => 'LastConnectionUtc',
        'address_line_one' => 'AddressLineOne',
        'address_line_two' => 'AddressLineTwo',
        'state' => 'State',
        'post_code' => 'PostCode',
        'suburb' => 'Suburb',
        'site_export_limit_enabled' => 'SiteExportLimitEnabled',
        'site_export_limit_w' => 'SiteExportLimitW',
        'is_disconnected' => 'IsDisconnected',
        'is_online' => 'IsOnline',
        'generation_status' => 'GenerationStatus',
        'comment' => 'Comment'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'nmi' => 'setNmi',
        'site_id' => 'setSiteId',
        'site_power_w' => 'setSitePowerW',
        'last_connection_utc' => 'setLastConnectionUtc',
        'address_line_one' => 'setAddressLineOne',
        'address_line_two' => 'setAddressLineTwo',
        'state' => 'setState',
        'post_code' => 'setPostCode',
        'suburb' => 'setSuburb',
        'site_export_limit_enabled' => 'setSiteExportLimitEnabled',
        'site_export_limit_w' => 'setSiteExportLimitW',
        'is_disconnected' => 'setIsDisconnected',
        'is_online' => 'setIsOnline',
        'generation_status' => 'setGenerationStatus',
        'comment' => 'setComment'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'nmi' => 'getNmi',
        'site_id' => 'getSiteId',
        'site_power_w' => 'getSitePowerW',
        'last_connection_utc' => 'getLastConnectionUtc',
        'address_line_one' => 'getAddressLineOne',
        'address_line_two' => 'getAddressLineTwo',
        'state' => 'getState',
        'post_code' => 'getPostCode',
        'suburb' => 'getSuburb',
        'site_export_limit_enabled' => 'getSiteExportLimitEnabled',
        'site_export_limit_w' => 'getSiteExportLimitW',
        'is_disconnected' => 'getIsDisconnected',
        'is_online' => 'getIsOnline',
        'generation_status' => 'getGenerationStatus',
        'comment' => 'getComment'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['nmi'] = isset($data['nmi']) ? $data['nmi'] : null;
        $this->container['site_id'] = isset($data['site_id']) ? $data['site_id'] : null;
        $this->container['site_power_w'] = isset($data['site_power_w']) ? $data['site_power_w'] : null;
        $this->container['last_connection_utc'] = isset($data['last_connection_utc']) ? $data['last_connection_utc'] : null;
        $this->container['address_line_one'] = isset($data['address_line_one']) ? $data['address_line_one'] : null;
        $this->container['address_line_two'] = isset($data['address_line_two']) ? $data['address_line_two'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['post_code'] = isset($data['post_code']) ? $data['post_code'] : null;
        $this->container['suburb'] = isset($data['suburb']) ? $data['suburb'] : null;
        $this->container['site_export_limit_enabled'] = isset($data['site_export_limit_enabled']) ? $data['site_export_limit_enabled'] : null;
        $this->container['site_export_limit_w'] = isset($data['site_export_limit_w']) ? $data['site_export_limit_w'] : null;
        $this->container['is_disconnected'] = isset($data['is_disconnected']) ? $data['is_disconnected'] : null;
        $this->container['is_online'] = isset($data['is_online']) ? $data['is_online'] : null;
        $this->container['generation_status'] = isset($data['generation_status']) ? $data['generation_status'] : null;
        $this->container['comment'] = isset($data['comment']) ? $data['comment'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets nmi
     *
     * @return string
     */
    public function getNmi()
    {
        return $this->container['nmi'];
    }

    /**
     * Sets nmi
     *
     * @param string $nmi NMI
     *
     * @return $this
     */
    public function setNmi($nmi)
    {
        $this->container['nmi'] = $nmi;

        return $this;
    }

    /**
     * Gets site_id
     *
     * @return string
     */
    public function getSiteId()
    {
        return $this->container['site_id'];
    }

    /**
     * Sets site_id
     *
     * @param string $site_id Site Id
     *
     * @return $this
     */
    public function setSiteId($site_id)
    {
        $this->container['site_id'] = $site_id;

        return $this;
    }

    /**
     * Gets site_power_w
     *
     * @return int
     */
    public function getSitePowerW()
    {
        return $this->container['site_power_w'];
    }

    /**
     * Sets site_power_w
     *
     * @param int $site_power_w Grid power in watts. Import is negative.
     *
     * @return $this
     */
    public function setSitePowerW($site_power_w)
    {
        $this->container['site_power_w'] = $site_power_w;

        return $this;
    }

    /**
     * Gets last_connection_utc
     *
     * @return \DateTime
     */
    public function getLastConnectionUtc()
    {
        return $this->container['last_connection_utc'];
    }

    /**
     * Sets last_connection_utc
     *
     * @param \DateTime $last_connection_utc Timestamp of the latest received telemetry in UTC.
     *
     * @return $this
     */
    public function setLastConnectionUtc($last_connection_utc)
    {
        $this->container['last_connection_utc'] = $last_connection_utc;

        return $this;
    }

    /**
     * Gets address_line_one
     *
     * @return string
     */
    public function getAddressLineOne()
    {
        return $this->container['address_line_one'];
    }

    /**
     * Sets address_line_one
     *
     * @param string $address_line_one Address
     *
     * @return $this
     */
    public function setAddressLineOne($address_line_one)
    {
        $this->container['address_line_one'] = $address_line_one;

        return $this;
    }

    /**
     * Gets address_line_two
     *
     * @return string
     */
    public function getAddressLineTwo()
    {
        return $this->container['address_line_two'];
    }

    /**
     * Sets address_line_two
     *
     * @param string $address_line_two Address
     *
     * @return $this
     */
    public function setAddressLineTwo($address_line_two)
    {
        $this->container['address_line_two'] = $address_line_two;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state Address
     *
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets post_code
     *
     * @return string
     */
    public function getPostCode()
    {
        return $this->container['post_code'];
    }

    /**
     * Sets post_code
     *
     * @param string $post_code Address
     *
     * @return $this
     */
    public function setPostCode($post_code)
    {
        $this->container['post_code'] = $post_code;

        return $this;
    }

    /**
     * Gets suburb
     *
     * @return string
     */
    public function getSuburb()
    {
        return $this->container['suburb'];
    }

    /**
     * Sets suburb
     *
     * @param string $suburb Address
     *
     * @return $this
     */
    public function setSuburb($suburb)
    {
        $this->container['suburb'] = $suburb;

        return $this;
    }

    /**
     * Gets site_export_limit_enabled
     *
     * @return bool
     */
    public function getSiteExportLimitEnabled()
    {
        return $this->container['site_export_limit_enabled'];
    }

    /**
     * Sets site_export_limit_enabled
     *
     * @param bool $site_export_limit_enabled True if the site has a functional export limit. The limit may be a static site export limit or come from a currently active dynamic operating envelope.
     *
     * @return $this
     */
    public function setSiteExportLimitEnabled($site_export_limit_enabled)
    {
        $this->container['site_export_limit_enabled'] = $site_export_limit_enabled;

        return $this;
    }

    /**
     * Gets site_export_limit_w
     *
     * @return int
     */
    public function getSiteExportLimitW()
    {
        return $this->container['site_export_limit_w'];
    }

    /**
     * Sets site_export_limit_w
     *
     * @param int $site_export_limit_w Value of the functional site export limit. The limit may be a static site export limit or come from a currently active dynamic operating envelope.
     *
     * @return $this
     */
    public function setSiteExportLimitW($site_export_limit_w)
    {
        $this->container['site_export_limit_w'] = $site_export_limit_w;

        return $this;
    }

    /**
     * Gets is_disconnected
     *
     * @return string
     */
    public function getIsDisconnected()
    {
        return $this->container['is_disconnected'];
    }

    /**
     * Sets is_disconnected
     *
     * @param string $is_disconnected \"Unknown\" if system if offline. \"Yes\" when absolute grid power is less than 400W; \"No\" otherwise.
     *
     * @return $this
     */
    public function setIsDisconnected($is_disconnected)
    {
        $this->container['is_disconnected'] = $is_disconnected;

        return $this;
    }

    /**
     * Gets is_online
     *
     * @return string
     */
    public function getIsOnline()
    {
        return $this->container['is_online'];
    }

    /**
     * Sets is_online
     *
     * @param string $is_online \"Yes\" if latest received telemetry is not older than 10 minutes old, \"Unknown\" otherwise.
     *
     * @return $this
     */
    public function setIsOnline($is_online)
    {
        $this->container['is_online'] = $is_online;

        return $this;
    }

    /**
     * Gets generation_status
     *
     * @return string
     */
    public function getGenerationStatus()
    {
        return $this->container['generation_status'];
    }

    /**
     * Sets generation_status
     *
     * @param string $generation_status \"Unknown\" if system if offline. \"ZeroExport\" if current functional site export limit is enabled and its value is less than 50, otherwise \"Connected\".
     *
     * @return $this
     */
    public function setGenerationStatus($generation_status)
    {
        $this->container['generation_status'] = $generation_status;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string $comment Comment
     *
     * @return $this
     */
    public function setComment($comment)
    {
        $this->container['comment'] = $comment;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
