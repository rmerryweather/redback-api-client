<?php
/**
 * InverterConfiguration
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Redback API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 * Contact: ITOps@redbacktech.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.64
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * InverterConfiguration Class Doc Comment
 *
 * @category Class
 * @description Inverter configuration
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InverterConfiguration implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'InverterConfiguration';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'site_id' => 'string',
        'nmi' => 'string',
        'serial_number' => 'string',
        'generation_hard_limit_va' => 'float',
        'generation_soft_limit_va' => 'float',
        'export_hard_limitk_w' => 'float',
        'export_soft_limitk_w' => 'float',
        'site_export_limitk_w' => 'float',
        'battery_max_charge_powerk_w' => 'float',
        'battery_max_discharge_powerk_w' => 'float',
        'battery_capacityk_wh' => 'float',
        'usable_battery_capacityk_wh' => 'float',
        'system_type' => 'string',
        'inverter_max_export_powerk_w' => 'float',
        'inverter_max_import_powerk_w' => 'float',
        'min_so_c0to1' => 'float',
        'min_offgrid_so_c0to1' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'site_id' => null,
        'nmi' => null,
        'serial_number' => null,
        'generation_hard_limit_va' => 'decimal',
        'generation_soft_limit_va' => 'decimal',
        'export_hard_limitk_w' => 'decimal',
        'export_soft_limitk_w' => 'decimal',
        'site_export_limitk_w' => 'decimal',
        'battery_max_charge_powerk_w' => 'decimal',
        'battery_max_discharge_powerk_w' => 'decimal',
        'battery_capacityk_wh' => 'decimal',
        'usable_battery_capacityk_wh' => 'decimal',
        'system_type' => null,
        'inverter_max_export_powerk_w' => 'decimal',
        'inverter_max_import_powerk_w' => 'decimal',
        'min_so_c0to1' => 'decimal',
        'min_offgrid_so_c0to1' => 'decimal'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'site_id' => 'SiteId',
        'nmi' => 'Nmi',
        'serial_number' => 'SerialNumber',
        'generation_hard_limit_va' => 'GenerationHardLimitVA',
        'generation_soft_limit_va' => 'GenerationSoftLimitVA',
        'export_hard_limitk_w' => 'ExportHardLimitkW',
        'export_soft_limitk_w' => 'ExportSoftLimitkW',
        'site_export_limitk_w' => 'SiteExportLimitkW',
        'battery_max_charge_powerk_w' => 'BatteryMaxChargePowerkW',
        'battery_max_discharge_powerk_w' => 'BatteryMaxDischargePowerkW',
        'battery_capacityk_wh' => 'BatteryCapacitykWh',
        'usable_battery_capacityk_wh' => 'UsableBatteryCapacitykWh',
        'system_type' => 'SystemType',
        'inverter_max_export_powerk_w' => 'InverterMaxExportPowerkW',
        'inverter_max_import_powerk_w' => 'InverterMaxImportPowerkW',
        'min_so_c0to1' => 'MinSoC0to1',
        'min_offgrid_so_c0to1' => 'MinOffgridSoC0to1'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'site_id' => 'setSiteId',
        'nmi' => 'setNmi',
        'serial_number' => 'setSerialNumber',
        'generation_hard_limit_va' => 'setGenerationHardLimitVa',
        'generation_soft_limit_va' => 'setGenerationSoftLimitVa',
        'export_hard_limitk_w' => 'setExportHardLimitkW',
        'export_soft_limitk_w' => 'setExportSoftLimitkW',
        'site_export_limitk_w' => 'setSiteExportLimitkW',
        'battery_max_charge_powerk_w' => 'setBatteryMaxChargePowerkW',
        'battery_max_discharge_powerk_w' => 'setBatteryMaxDischargePowerkW',
        'battery_capacityk_wh' => 'setBatteryCapacitykWh',
        'usable_battery_capacityk_wh' => 'setUsableBatteryCapacitykWh',
        'system_type' => 'setSystemType',
        'inverter_max_export_powerk_w' => 'setInverterMaxExportPowerkW',
        'inverter_max_import_powerk_w' => 'setInverterMaxImportPowerkW',
        'min_so_c0to1' => 'setMinSoC0to1',
        'min_offgrid_so_c0to1' => 'setMinOffgridSoC0to1'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'site_id' => 'getSiteId',
        'nmi' => 'getNmi',
        'serial_number' => 'getSerialNumber',
        'generation_hard_limit_va' => 'getGenerationHardLimitVa',
        'generation_soft_limit_va' => 'getGenerationSoftLimitVa',
        'export_hard_limitk_w' => 'getExportHardLimitkW',
        'export_soft_limitk_w' => 'getExportSoftLimitkW',
        'site_export_limitk_w' => 'getSiteExportLimitkW',
        'battery_max_charge_powerk_w' => 'getBatteryMaxChargePowerkW',
        'battery_max_discharge_powerk_w' => 'getBatteryMaxDischargePowerkW',
        'battery_capacityk_wh' => 'getBatteryCapacitykWh',
        'usable_battery_capacityk_wh' => 'getUsableBatteryCapacitykWh',
        'system_type' => 'getSystemType',
        'inverter_max_export_powerk_w' => 'getInverterMaxExportPowerkW',
        'inverter_max_import_powerk_w' => 'getInverterMaxImportPowerkW',
        'min_so_c0to1' => 'getMinSoC0to1',
        'min_offgrid_so_c0to1' => 'getMinOffgridSoC0to1'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['site_id'] = isset($data['site_id']) ? $data['site_id'] : null;
        $this->container['nmi'] = isset($data['nmi']) ? $data['nmi'] : null;
        $this->container['serial_number'] = isset($data['serial_number']) ? $data['serial_number'] : null;
        $this->container['generation_hard_limit_va'] = isset($data['generation_hard_limit_va']) ? $data['generation_hard_limit_va'] : null;
        $this->container['generation_soft_limit_va'] = isset($data['generation_soft_limit_va']) ? $data['generation_soft_limit_va'] : null;
        $this->container['export_hard_limitk_w'] = isset($data['export_hard_limitk_w']) ? $data['export_hard_limitk_w'] : null;
        $this->container['export_soft_limitk_w'] = isset($data['export_soft_limitk_w']) ? $data['export_soft_limitk_w'] : null;
        $this->container['site_export_limitk_w'] = isset($data['site_export_limitk_w']) ? $data['site_export_limitk_w'] : null;
        $this->container['battery_max_charge_powerk_w'] = isset($data['battery_max_charge_powerk_w']) ? $data['battery_max_charge_powerk_w'] : null;
        $this->container['battery_max_discharge_powerk_w'] = isset($data['battery_max_discharge_powerk_w']) ? $data['battery_max_discharge_powerk_w'] : null;
        $this->container['battery_capacityk_wh'] = isset($data['battery_capacityk_wh']) ? $data['battery_capacityk_wh'] : null;
        $this->container['usable_battery_capacityk_wh'] = isset($data['usable_battery_capacityk_wh']) ? $data['usable_battery_capacityk_wh'] : null;
        $this->container['system_type'] = isset($data['system_type']) ? $data['system_type'] : null;
        $this->container['inverter_max_export_powerk_w'] = isset($data['inverter_max_export_powerk_w']) ? $data['inverter_max_export_powerk_w'] : null;
        $this->container['inverter_max_import_powerk_w'] = isset($data['inverter_max_import_powerk_w']) ? $data['inverter_max_import_powerk_w'] : null;
        $this->container['min_so_c0to1'] = isset($data['min_so_c0to1']) ? $data['min_so_c0to1'] : null;
        $this->container['min_offgrid_so_c0to1'] = isset($data['min_offgrid_so_c0to1']) ? $data['min_offgrid_so_c0to1'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets site_id
     *
     * @return string
     */
    public function getSiteId()
    {
        return $this->container['site_id'];
    }

    /**
     * Sets site_id
     *
     * @param string $site_id Site id
     *
     * @return $this
     */
    public function setSiteId($site_id)
    {
        $this->container['site_id'] = $site_id;

        return $this;
    }

    /**
     * Gets nmi
     *
     * @return string
     */
    public function getNmi()
    {
        return $this->container['nmi'];
    }

    /**
     * Sets nmi
     *
     * @param string $nmi National Metering Identifier
     *
     * @return $this
     */
    public function setNmi($nmi)
    {
        $this->container['nmi'] = $nmi;

        return $this;
    }

    /**
     * Gets serial_number
     *
     * @return string
     */
    public function getSerialNumber()
    {
        return $this->container['serial_number'];
    }

    /**
     * Sets serial_number
     *
     * @param string $serial_number Serial Number
     *
     * @return $this
     */
    public function setSerialNumber($serial_number)
    {
        $this->container['serial_number'] = $serial_number;

        return $this;
    }

    /**
     * Gets generation_hard_limit_va
     *
     * @return float
     */
    public function getGenerationHardLimitVa()
    {
        return $this->container['generation_hard_limit_va'];
    }

    /**
     * Sets generation_hard_limit_va
     *
     * @param float $generation_hard_limit_va Gets generation hard limit. Unit: volt amps
     *
     * @return $this
     */
    public function setGenerationHardLimitVa($generation_hard_limit_va)
    {
        $this->container['generation_hard_limit_va'] = $generation_hard_limit_va;

        return $this;
    }

    /**
     * Gets generation_soft_limit_va
     *
     * @return float
     */
    public function getGenerationSoftLimitVa()
    {
        return $this->container['generation_soft_limit_va'];
    }

    /**
     * Sets generation_soft_limit_va
     *
     * @param float $generation_soft_limit_va Gets generation soft limit. Unit: volt amps
     *
     * @return $this
     */
    public function setGenerationSoftLimitVa($generation_soft_limit_va)
    {
        $this->container['generation_soft_limit_va'] = $generation_soft_limit_va;

        return $this;
    }

    /**
     * Gets export_hard_limitk_w
     *
     * @return float
     */
    public function getExportHardLimitkW()
    {
        return $this->container['export_hard_limitk_w'];
    }

    /**
     * Sets export_hard_limitk_w
     *
     * @param float $export_hard_limitk_w Gets export hard limit. Unit: kilowatt
     *
     * @return $this
     */
    public function setExportHardLimitkW($export_hard_limitk_w)
    {
        $this->container['export_hard_limitk_w'] = $export_hard_limitk_w;

        return $this;
    }

    /**
     * Gets export_soft_limitk_w
     *
     * @return float
     */
    public function getExportSoftLimitkW()
    {
        return $this->container['export_soft_limitk_w'];
    }

    /**
     * Sets export_soft_limitk_w
     *
     * @param float $export_soft_limitk_w Gets export soft limit. Unit: kilowatt
     *
     * @return $this
     */
    public function setExportSoftLimitkW($export_soft_limitk_w)
    {
        $this->container['export_soft_limitk_w'] = $export_soft_limitk_w;

        return $this;
    }

    /**
     * Gets site_export_limitk_w
     *
     * @return float
     */
    public function getSiteExportLimitkW()
    {
        return $this->container['site_export_limitk_w'];
    }

    /**
     * Sets site_export_limitk_w
     *
     * @param float $site_export_limitk_w Gets site export limit. Unit: kilowatt
     *
     * @return $this
     */
    public function setSiteExportLimitkW($site_export_limitk_w)
    {
        $this->container['site_export_limitk_w'] = $site_export_limitk_w;

        return $this;
    }

    /**
     * Gets battery_max_charge_powerk_w
     *
     * @return float
     */
    public function getBatteryMaxChargePowerkW()
    {
        return $this->container['battery_max_charge_powerk_w'];
    }

    /**
     * Sets battery_max_charge_powerk_w
     *
     * @param float $battery_max_charge_powerk_w Gets the static 'nominal' maximum charge power theoretically supported by the site's inverter and batteries. The actual \"at this point in time\" value may be lower. Unit: kilowatt
     *
     * @return $this
     */
    public function setBatteryMaxChargePowerkW($battery_max_charge_powerk_w)
    {
        $this->container['battery_max_charge_powerk_w'] = $battery_max_charge_powerk_w;

        return $this;
    }

    /**
     * Gets battery_max_discharge_powerk_w
     *
     * @return float
     */
    public function getBatteryMaxDischargePowerkW()
    {
        return $this->container['battery_max_discharge_powerk_w'];
    }

    /**
     * Sets battery_max_discharge_powerk_w
     *
     * @param float $battery_max_discharge_powerk_w Gets the static 'nominal' maximum discharge power theoretically supported by the site's inverter and batteries. The actual \"at this point in time\" value may be lower. Unit: kilowatt
     *
     * @return $this
     */
    public function setBatteryMaxDischargePowerkW($battery_max_discharge_powerk_w)
    {
        $this->container['battery_max_discharge_powerk_w'] = $battery_max_discharge_powerk_w;

        return $this;
    }

    /**
     * Gets battery_capacityk_wh
     *
     * @return float
     */
    public function getBatteryCapacitykWh()
    {
        return $this->container['battery_capacityk_wh'];
    }

    /**
     * Sets battery_capacityk_wh
     *
     * @param float $battery_capacityk_wh Gets the size of the batteries.  Unit: kilowatthour
     *
     * @return $this
     */
    public function setBatteryCapacitykWh($battery_capacityk_wh)
    {
        $this->container['battery_capacityk_wh'] = $battery_capacityk_wh;

        return $this;
    }

    /**
     * Gets usable_battery_capacityk_wh
     *
     * @return float
     */
    public function getUsableBatteryCapacitykWh()
    {
        return $this->container['usable_battery_capacityk_wh'];
    }

    /**
     * Sets usable_battery_capacityk_wh
     *
     * @param float $usable_battery_capacityk_wh Gets the usable static nominal energy of the batteries. It is BatteryCapacitykWh x (1 - Nominal Min SoC). The actual \"at this point in time\" value may be lower and will be affected by the current SoC and by the 'reserve' Min SoC, which is usually higher than Battery Nominal Min SoC Unit: kilowatthour
     *
     * @return $this
     */
    public function setUsableBatteryCapacitykWh($usable_battery_capacityk_wh)
    {
        $this->container['usable_battery_capacityk_wh'] = $usable_battery_capacityk_wh;

        return $this;
    }

    /**
     * Gets system_type
     *
     * @return string
     */
    public function getSystemType()
    {
        return $this->container['system_type'];
    }

    /**
     * Sets system_type
     *
     * @param string $system_type Gets System type
     *
     * @return $this
     */
    public function setSystemType($system_type)
    {
        $this->container['system_type'] = $system_type;

        return $this;
    }

    /**
     * Gets inverter_max_export_powerk_w
     *
     * @return float
     */
    public function getInverterMaxExportPowerkW()
    {
        return $this->container['inverter_max_export_powerk_w'];
    }

    /**
     * Sets inverter_max_export_powerk_w
     *
     * @param float $inverter_max_export_powerk_w Gets the static 'nominal' maximum export power. The actual \"at this point in time\" value may be lower, affected, for example by site export limit. Unit: kilowatt
     *
     * @return $this
     */
    public function setInverterMaxExportPowerkW($inverter_max_export_powerk_w)
    {
        $this->container['inverter_max_export_powerk_w'] = $inverter_max_export_powerk_w;

        return $this;
    }

    /**
     * Gets inverter_max_import_powerk_w
     *
     * @return float
     */
    public function getInverterMaxImportPowerkW()
    {
        return $this->container['inverter_max_import_powerk_w'];
    }

    /**
     * Sets inverter_max_import_powerk_w
     *
     * @param float $inverter_max_import_powerk_w Gets the static 'nominal' maximum input power. The actual \"at this point in time\" value may be lower. Unit: kilowatt
     *
     * @return $this
     */
    public function setInverterMaxImportPowerkW($inverter_max_import_powerk_w)
    {
        $this->container['inverter_max_import_powerk_w'] = $inverter_max_import_powerk_w;

        return $this;
    }

    /**
     * Gets min_so_c0to1
     *
     * @return float
     */
    public function getMinSoC0to1()
    {
        return $this->container['min_so_c0to1'];
    }

    /**
     * Sets min_so_c0to1
     *
     * @param float $min_so_c0to1 Gets the current 'reserve' minimum SoC Unit: no unit, 0 to 1
     *
     * @return $this
     */
    public function setMinSoC0to1($min_so_c0to1)
    {
        $this->container['min_so_c0to1'] = $min_so_c0to1;

        return $this;
    }

    /**
     * Gets min_offgrid_so_c0to1
     *
     * @return float
     */
    public function getMinOffgridSoC0to1()
    {
        return $this->container['min_offgrid_so_c0to1'];
    }

    /**
     * Sets min_offgrid_so_c0to1
     *
     * @param float $min_offgrid_so_c0to1 Gets the current 'reserve' minimum offgrid SoC Unit: no unit, 0 to 1
     *
     * @return $this
     */
    public function setMinOffgridSoC0to1($min_offgrid_so_c0to1)
    {
        $this->container['min_offgrid_so_c0to1'] = $min_offgrid_so_c0to1;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
