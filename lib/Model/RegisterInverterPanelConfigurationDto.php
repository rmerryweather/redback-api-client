<?php
/**
 * RegisterInverterPanelConfigurationDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Redback API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 * Contact: ITOps@redbacktech.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.64
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * RegisterInverterPanelConfigurationDto Class Doc Comment
 *
 * @category Class
 * @description solar panel info
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RegisterInverterPanelConfigurationDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'RegisterInverterPanelConfigurationDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'panel_direction' => 'AllOfRegisterInverterPanelConfigurationDtoPanelDirection',
        'number_of_panels' => 'int',
        'watts_per_panel' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'panel_direction' => null,
        'number_of_panels' => 'int32',
        'watts_per_panel' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'panel_direction' => 'PanelDirection',
        'number_of_panels' => 'NumberOfPanels',
        'watts_per_panel' => 'WattsPerPanel'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'panel_direction' => 'setPanelDirection',
        'number_of_panels' => 'setNumberOfPanels',
        'watts_per_panel' => 'setWattsPerPanel'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'panel_direction' => 'getPanelDirection',
        'number_of_panels' => 'getNumberOfPanels',
        'watts_per_panel' => 'getWattsPerPanel'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['panel_direction'] = isset($data['panel_direction']) ? $data['panel_direction'] : null;
        $this->container['number_of_panels'] = isset($data['number_of_panels']) ? $data['number_of_panels'] : null;
        $this->container['watts_per_panel'] = isset($data['watts_per_panel']) ? $data['watts_per_panel'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['panel_direction'] === null) {
            $invalidProperties[] = "'panel_direction' can't be null";
        }
        if ($this->container['number_of_panels'] === null) {
            $invalidProperties[] = "'number_of_panels' can't be null";
        }
        if ($this->container['watts_per_panel'] === null) {
            $invalidProperties[] = "'watts_per_panel' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets panel_direction
     *
     * @return AllOfRegisterInverterPanelConfigurationDtoPanelDirection
     */
    public function getPanelDirection()
    {
        return $this->container['panel_direction'];
    }

    /**
     * Sets panel_direction
     *
     * @param AllOfRegisterInverterPanelConfigurationDtoPanelDirection $panel_direction Direction of the panels, e.g. N or NE
     *
     * @return $this
     */
    public function setPanelDirection($panel_direction)
    {
        $this->container['panel_direction'] = $panel_direction;

        return $this;
    }

    /**
     * Gets number_of_panels
     *
     * @return int
     */
    public function getNumberOfPanels()
    {
        return $this->container['number_of_panels'];
    }

    /**
     * Sets number_of_panels
     *
     * @param int $number_of_panels Number of panels. This multiplied by WattsPerPanel will be stored as the total PV size
     *
     * @return $this
     */
    public function setNumberOfPanels($number_of_panels)
    {
        $this->container['number_of_panels'] = $number_of_panels;

        return $this;
    }

    /**
     * Gets watts_per_panel
     *
     * @return int
     */
    public function getWattsPerPanel()
    {
        return $this->container['watts_per_panel'];
    }

    /**
     * Sets watts_per_panel
     *
     * @param int $watts_per_panel Number of panels. This multiplied by NumberOfPanels will be stored as the total PV size
     *
     * @return $this
     */
    public function setWattsPerPanel($watts_per_panel)
    {
        $this->container['watts_per_panel'] = $watts_per_panel;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
