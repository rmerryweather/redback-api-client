<?php
/**
 * InverterSiteDynamicData
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Redback API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 * Contact: ITOps@redbacktech.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.64
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * InverterSiteDynamicData Class Doc Comment
 *
 * @category Class
 * @description Dynamic data for an inverter site for API version prior to 2.19
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InverterSiteDynamicData implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'InverterSiteDynamicData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'timestamp_utc' => '\DateTime',
        'site_id' => 'string',
        'phases' => '\Swagger\Client\Model\Phase[]',
        'frequency_instantaneous_hz' => 'float',
        'battery_so_c_instantaneous0to1' => 'float',
        'pv_power_instantaneousk_w' => 'float',
        'inverter_temperature_c' => 'float',
        'battery_power_negative_is_chargingk_w' => 'float',
        'pv_all_time_energyk_wh' => 'float',
        'export_all_time_energyk_wh' => 'float',
        'import_all_time_energyk_wh' => 'float',
        'load_all_time_energyk_wh' => 'float',
        'status' => 'AllOfInverterSiteDynamicDataStatus',
        'inverters' => '\Swagger\Client\Model\InverterSiteDynamicDataSingleInverter[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'timestamp_utc' => 'date-time',
        'site_id' => null,
        'phases' => null,
        'frequency_instantaneous_hz' => 'decimal',
        'battery_so_c_instantaneous0to1' => 'decimal',
        'pv_power_instantaneousk_w' => 'decimal',
        'inverter_temperature_c' => 'decimal',
        'battery_power_negative_is_chargingk_w' => 'decimal',
        'pv_all_time_energyk_wh' => 'decimal',
        'export_all_time_energyk_wh' => 'decimal',
        'import_all_time_energyk_wh' => 'decimal',
        'load_all_time_energyk_wh' => 'decimal',
        'status' => null,
        'inverters' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'timestamp_utc' => 'TimestampUtc',
        'site_id' => 'SiteId',
        'phases' => 'Phases',
        'frequency_instantaneous_hz' => 'FrequencyInstantaneousHz',
        'battery_so_c_instantaneous0to1' => 'BatterySoCInstantaneous0to1',
        'pv_power_instantaneousk_w' => 'PvPowerInstantaneouskW',
        'inverter_temperature_c' => 'InverterTemperatureC',
        'battery_power_negative_is_chargingk_w' => 'BatteryPowerNegativeIsChargingkW',
        'pv_all_time_energyk_wh' => 'PvAllTimeEnergykWh',
        'export_all_time_energyk_wh' => 'ExportAllTimeEnergykWh',
        'import_all_time_energyk_wh' => 'ImportAllTimeEnergykWh',
        'load_all_time_energyk_wh' => 'LoadAllTimeEnergykWh',
        'status' => 'Status',
        'inverters' => 'Inverters'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'timestamp_utc' => 'setTimestampUtc',
        'site_id' => 'setSiteId',
        'phases' => 'setPhases',
        'frequency_instantaneous_hz' => 'setFrequencyInstantaneousHz',
        'battery_so_c_instantaneous0to1' => 'setBatterySoCInstantaneous0to1',
        'pv_power_instantaneousk_w' => 'setPvPowerInstantaneouskW',
        'inverter_temperature_c' => 'setInverterTemperatureC',
        'battery_power_negative_is_chargingk_w' => 'setBatteryPowerNegativeIsChargingkW',
        'pv_all_time_energyk_wh' => 'setPvAllTimeEnergykWh',
        'export_all_time_energyk_wh' => 'setExportAllTimeEnergykWh',
        'import_all_time_energyk_wh' => 'setImportAllTimeEnergykWh',
        'load_all_time_energyk_wh' => 'setLoadAllTimeEnergykWh',
        'status' => 'setStatus',
        'inverters' => 'setInverters'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'timestamp_utc' => 'getTimestampUtc',
        'site_id' => 'getSiteId',
        'phases' => 'getPhases',
        'frequency_instantaneous_hz' => 'getFrequencyInstantaneousHz',
        'battery_so_c_instantaneous0to1' => 'getBatterySoCInstantaneous0to1',
        'pv_power_instantaneousk_w' => 'getPvPowerInstantaneouskW',
        'inverter_temperature_c' => 'getInverterTemperatureC',
        'battery_power_negative_is_chargingk_w' => 'getBatteryPowerNegativeIsChargingkW',
        'pv_all_time_energyk_wh' => 'getPvAllTimeEnergykWh',
        'export_all_time_energyk_wh' => 'getExportAllTimeEnergykWh',
        'import_all_time_energyk_wh' => 'getImportAllTimeEnergykWh',
        'load_all_time_energyk_wh' => 'getLoadAllTimeEnergykWh',
        'status' => 'getStatus',
        'inverters' => 'getInverters'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['timestamp_utc'] = isset($data['timestamp_utc']) ? $data['timestamp_utc'] : null;
        $this->container['site_id'] = isset($data['site_id']) ? $data['site_id'] : null;
        $this->container['phases'] = isset($data['phases']) ? $data['phases'] : null;
        $this->container['frequency_instantaneous_hz'] = isset($data['frequency_instantaneous_hz']) ? $data['frequency_instantaneous_hz'] : null;
        $this->container['battery_so_c_instantaneous0to1'] = isset($data['battery_so_c_instantaneous0to1']) ? $data['battery_so_c_instantaneous0to1'] : null;
        $this->container['pv_power_instantaneousk_w'] = isset($data['pv_power_instantaneousk_w']) ? $data['pv_power_instantaneousk_w'] : null;
        $this->container['inverter_temperature_c'] = isset($data['inverter_temperature_c']) ? $data['inverter_temperature_c'] : null;
        $this->container['battery_power_negative_is_chargingk_w'] = isset($data['battery_power_negative_is_chargingk_w']) ? $data['battery_power_negative_is_chargingk_w'] : null;
        $this->container['pv_all_time_energyk_wh'] = isset($data['pv_all_time_energyk_wh']) ? $data['pv_all_time_energyk_wh'] : null;
        $this->container['export_all_time_energyk_wh'] = isset($data['export_all_time_energyk_wh']) ? $data['export_all_time_energyk_wh'] : null;
        $this->container['import_all_time_energyk_wh'] = isset($data['import_all_time_energyk_wh']) ? $data['import_all_time_energyk_wh'] : null;
        $this->container['load_all_time_energyk_wh'] = isset($data['load_all_time_energyk_wh']) ? $data['load_all_time_energyk_wh'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['inverters'] = isset($data['inverters']) ? $data['inverters'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['timestamp_utc'] === null) {
            $invalidProperties[] = "'timestamp_utc' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets timestamp_utc
     *
     * @return \DateTime
     */
    public function getTimestampUtc()
    {
        return $this->container['timestamp_utc'];
    }

    /**
     * Sets timestamp_utc
     *
     * @param \DateTime $timestamp_utc Gets the timestamp of the data in ISO 8601 format.
     *
     * @return $this
     */
    public function setTimestampUtc($timestamp_utc)
    {
        $this->container['timestamp_utc'] = $timestamp_utc;

        return $this;
    }

    /**
     * Gets site_id
     *
     * @return string
     */
    public function getSiteId()
    {
        return $this->container['site_id'];
    }

    /**
     * Sets site_id
     *
     * @param string $site_id Site Id
     *
     * @return $this
     */
    public function setSiteId($site_id)
    {
        $this->container['site_id'] = $site_id;

        return $this;
    }

    /**
     * Gets phases
     *
     * @return \Swagger\Client\Model\Phase[]
     */
    public function getPhases()
    {
        return $this->container['phases'];
    }

    /**
     * Sets phases
     *
     * @param \Swagger\Client\Model\Phase[] $phases Gets phase information
     *
     * @return $this
     */
    public function setPhases($phases)
    {
        $this->container['phases'] = $phases;

        return $this;
    }

    /**
     * Gets frequency_instantaneous_hz
     *
     * @return float
     */
    public function getFrequencyInstantaneousHz()
    {
        return $this->container['frequency_instantaneous_hz'];
    }

    /**
     * Sets frequency_instantaneous_hz
     *
     * @param float $frequency_instantaneous_hz Gets frequency
     *
     * @return $this
     */
    public function setFrequencyInstantaneousHz($frequency_instantaneous_hz)
    {
        $this->container['frequency_instantaneous_hz'] = $frequency_instantaneous_hz;

        return $this;
    }

    /**
     * Gets battery_so_c_instantaneous0to1
     *
     * @return float
     */
    public function getBatterySoCInstantaneous0to1()
    {
        return $this->container['battery_so_c_instantaneous0to1'];
    }

    /**
     * Sets battery_so_c_instantaneous0to1
     *
     * @param float $battery_so_c_instantaneous0to1 Gets Battery state of charge as a value between 0 an 1
     *
     * @return $this
     */
    public function setBatterySoCInstantaneous0to1($battery_so_c_instantaneous0to1)
    {
        $this->container['battery_so_c_instantaneous0to1'] = $battery_so_c_instantaneous0to1;

        return $this;
    }

    /**
     * Gets pv_power_instantaneousk_w
     *
     * @return float
     */
    public function getPvPowerInstantaneouskW()
    {
        return $this->container['pv_power_instantaneousk_w'];
    }

    /**
     * Sets pv_power_instantaneousk_w
     *
     * @param float $pv_power_instantaneousk_w Gets power from PV
     *
     * @return $this
     */
    public function setPvPowerInstantaneouskW($pv_power_instantaneousk_w)
    {
        $this->container['pv_power_instantaneousk_w'] = $pv_power_instantaneousk_w;

        return $this;
    }

    /**
     * Gets inverter_temperature_c
     *
     * @return float
     */
    public function getInverterTemperatureC()
    {
        return $this->container['inverter_temperature_c'];
    }

    /**
     * Sets inverter_temperature_c
     *
     * @param float $inverter_temperature_c Gets inverter's temperature in degrees Celsius
     *
     * @return $this
     */
    public function setInverterTemperatureC($inverter_temperature_c)
    {
        $this->container['inverter_temperature_c'] = $inverter_temperature_c;

        return $this;
    }

    /**
     * Gets battery_power_negative_is_chargingk_w
     *
     * @return float
     */
    public function getBatteryPowerNegativeIsChargingkW()
    {
        return $this->container['battery_power_negative_is_chargingk_w'];
    }

    /**
     * Sets battery_power_negative_is_chargingk_w
     *
     * @param float $battery_power_negative_is_chargingk_w Gets Battery power with negative meaning charging. Unit: Kilowatt
     *
     * @return $this
     */
    public function setBatteryPowerNegativeIsChargingkW($battery_power_negative_is_chargingk_w)
    {
        $this->container['battery_power_negative_is_chargingk_w'] = $battery_power_negative_is_chargingk_w;

        return $this;
    }

    /**
     * Gets pv_all_time_energyk_wh
     *
     * @return float
     */
    public function getPvAllTimeEnergykWh()
    {
        return $this->container['pv_all_time_energyk_wh'];
    }

    /**
     * Sets pv_all_time_energyk_wh
     *
     * @param float $pv_all_time_energyk_wh Gets total energy from PV. Unit: Kilowatt-hour Normally this value always grows, but this is not guaranteed. The value may be reset and the client code must be able to deal with this.
     *
     * @return $this
     */
    public function setPvAllTimeEnergykWh($pv_all_time_energyk_wh)
    {
        $this->container['pv_all_time_energyk_wh'] = $pv_all_time_energyk_wh;

        return $this;
    }

    /**
     * Gets export_all_time_energyk_wh
     *
     * @return float
     */
    public function getExportAllTimeEnergykWh()
    {
        return $this->container['export_all_time_energyk_wh'];
    }

    /**
     * Sets export_all_time_energyk_wh
     *
     * @param float $export_all_time_energyk_wh Gets total energy to grid. Unit: Kilowatt-hour Normally this value always grows, but this is not guaranteed. The value may be reset and the client code must be able to deal with this.
     *
     * @return $this
     */
    public function setExportAllTimeEnergykWh($export_all_time_energyk_wh)
    {
        $this->container['export_all_time_energyk_wh'] = $export_all_time_energyk_wh;

        return $this;
    }

    /**
     * Gets import_all_time_energyk_wh
     *
     * @return float
     */
    public function getImportAllTimeEnergykWh()
    {
        return $this->container['import_all_time_energyk_wh'];
    }

    /**
     * Sets import_all_time_energyk_wh
     *
     * @param float $import_all_time_energyk_wh Gets total energy from grid. Unit: Kilowatt-hour Normally this value always grows, but this is not guaranteed. The value may be reset and the client code must be able to deal with this.
     *
     * @return $this
     */
    public function setImportAllTimeEnergykWh($import_all_time_energyk_wh)
    {
        $this->container['import_all_time_energyk_wh'] = $import_all_time_energyk_wh;

        return $this;
    }

    /**
     * Gets load_all_time_energyk_wh
     *
     * @return float
     */
    public function getLoadAllTimeEnergykWh()
    {
        return $this->container['load_all_time_energyk_wh'];
    }

    /**
     * Sets load_all_time_energyk_wh
     *
     * @param float $load_all_time_energyk_wh Gets cumulative total load. Unit: Kilowatt-hour Normally this value always grows, but this is not guaranteed. The value may be reset and the client code must be able to deal with this.
     *
     * @return $this
     */
    public function setLoadAllTimeEnergykWh($load_all_time_energyk_wh)
    {
        $this->container['load_all_time_energyk_wh'] = $load_all_time_energyk_wh;

        return $this;
    }

    /**
     * Gets status
     *
     * @return AllOfInverterSiteDynamicDataStatus
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param AllOfInverterSiteDynamicDataStatus $status Site status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets inverters
     *
     * @return \Swagger\Client\Model\InverterSiteDynamicDataSingleInverter[]
     */
    public function getInverters()
    {
        return $this->container['inverters'];
    }

    /**
     * Sets inverters
     *
     * @param \Swagger\Client\Model\InverterSiteDynamicDataSingleInverter[] $inverters Inverters
     *
     * @return $this
     */
    public function setInverters($inverters)
    {
        $this->container['inverters'] = $inverters;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
