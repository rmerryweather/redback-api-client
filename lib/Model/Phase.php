<?php
/**
 * Phase
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Redback API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 * Contact: ITOps@redbacktech.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.64
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Phase Class Doc Comment
 *
 * @category Class
 * @description Phase
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Phase implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Phase';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'AllOfPhaseId',
        'active_exported_power_instantaneousk_w' => 'float',
        'active_imported_power_instantaneousk_w' => 'float',
        'voltage_instantaneous_v' => 'float',
        'current_instantaneous_a' => 'float',
        'power_factor_instantaneous_minus1to1' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'active_exported_power_instantaneousk_w' => 'decimal',
        'active_imported_power_instantaneousk_w' => 'decimal',
        'voltage_instantaneous_v' => 'decimal',
        'current_instantaneous_a' => 'decimal',
        'power_factor_instantaneous_minus1to1' => 'decimal'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'Id',
        'active_exported_power_instantaneousk_w' => 'ActiveExportedPowerInstantaneouskW',
        'active_imported_power_instantaneousk_w' => 'ActiveImportedPowerInstantaneouskW',
        'voltage_instantaneous_v' => 'VoltageInstantaneousV',
        'current_instantaneous_a' => 'CurrentInstantaneousA',
        'power_factor_instantaneous_minus1to1' => 'PowerFactorInstantaneousMinus1to1'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'active_exported_power_instantaneousk_w' => 'setActiveExportedPowerInstantaneouskW',
        'active_imported_power_instantaneousk_w' => 'setActiveImportedPowerInstantaneouskW',
        'voltage_instantaneous_v' => 'setVoltageInstantaneousV',
        'current_instantaneous_a' => 'setCurrentInstantaneousA',
        'power_factor_instantaneous_minus1to1' => 'setPowerFactorInstantaneousMinus1to1'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'active_exported_power_instantaneousk_w' => 'getActiveExportedPowerInstantaneouskW',
        'active_imported_power_instantaneousk_w' => 'getActiveImportedPowerInstantaneouskW',
        'voltage_instantaneous_v' => 'getVoltageInstantaneousV',
        'current_instantaneous_a' => 'getCurrentInstantaneousA',
        'power_factor_instantaneous_minus1to1' => 'getPowerFactorInstantaneousMinus1to1'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['active_exported_power_instantaneousk_w'] = isset($data['active_exported_power_instantaneousk_w']) ? $data['active_exported_power_instantaneousk_w'] : null;
        $this->container['active_imported_power_instantaneousk_w'] = isset($data['active_imported_power_instantaneousk_w']) ? $data['active_imported_power_instantaneousk_w'] : null;
        $this->container['voltage_instantaneous_v'] = isset($data['voltage_instantaneous_v']) ? $data['voltage_instantaneous_v'] : null;
        $this->container['current_instantaneous_a'] = isset($data['current_instantaneous_a']) ? $data['current_instantaneous_a'] : null;
        $this->container['power_factor_instantaneous_minus1to1'] = isset($data['power_factor_instantaneous_minus1to1']) ? $data['power_factor_instantaneous_minus1to1'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return AllOfPhaseId
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param AllOfPhaseId $id Gets name of the phase. \"A\", \"B\", \"C\"
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets active_exported_power_instantaneousk_w
     *
     * @return float
     */
    public function getActiveExportedPowerInstantaneouskW()
    {
        return $this->container['active_exported_power_instantaneousk_w'];
    }

    /**
     * Sets active_exported_power_instantaneousk_w
     *
     * @param float $active_exported_power_instantaneousk_w Gets active power being exported. Zero if importing. Unit: kilowatt
     *
     * @return $this
     */
    public function setActiveExportedPowerInstantaneouskW($active_exported_power_instantaneousk_w)
    {
        $this->container['active_exported_power_instantaneousk_w'] = $active_exported_power_instantaneousk_w;

        return $this;
    }

    /**
     * Gets active_imported_power_instantaneousk_w
     *
     * @return float
     */
    public function getActiveImportedPowerInstantaneouskW()
    {
        return $this->container['active_imported_power_instantaneousk_w'];
    }

    /**
     * Sets active_imported_power_instantaneousk_w
     *
     * @param float $active_imported_power_instantaneousk_w Gets active power being imported. Zero if exporting. Unit: kilowatt
     *
     * @return $this
     */
    public function setActiveImportedPowerInstantaneouskW($active_imported_power_instantaneousk_w)
    {
        $this->container['active_imported_power_instantaneousk_w'] = $active_imported_power_instantaneousk_w;

        return $this;
    }

    /**
     * Gets voltage_instantaneous_v
     *
     * @return float
     */
    public function getVoltageInstantaneousV()
    {
        return $this->container['voltage_instantaneous_v'];
    }

    /**
     * Sets voltage_instantaneous_v
     *
     * @param float $voltage_instantaneous_v Voltage Instantaneous V
     *
     * @return $this
     */
    public function setVoltageInstantaneousV($voltage_instantaneous_v)
    {
        $this->container['voltage_instantaneous_v'] = $voltage_instantaneous_v;

        return $this;
    }

    /**
     * Gets current_instantaneous_a
     *
     * @return float
     */
    public function getCurrentInstantaneousA()
    {
        return $this->container['current_instantaneous_a'];
    }

    /**
     * Sets current_instantaneous_a
     *
     * @param float $current_instantaneous_a Current Instantaneous A
     *
     * @return $this
     */
    public function setCurrentInstantaneousA($current_instantaneous_a)
    {
        $this->container['current_instantaneous_a'] = $current_instantaneous_a;

        return $this;
    }

    /**
     * Gets power_factor_instantaneous_minus1to1
     *
     * @return float
     */
    public function getPowerFactorInstantaneousMinus1to1()
    {
        return $this->container['power_factor_instantaneous_minus1to1'];
    }

    /**
     * Sets power_factor_instantaneous_minus1to1
     *
     * @param float $power_factor_instantaneous_minus1to1 Power factor
     *
     * @return $this
     */
    public function setPowerFactorInstantaneousMinus1to1($power_factor_instantaneous_minus1to1)
    {
        $this->container['power_factor_instantaneous_minus1to1'] = $power_factor_instantaneous_minus1to1;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
