<?php
/**
 * InverterSiteStaticData
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Redback API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 * Contact: ITOps@redbacktech.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.64
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * InverterSiteStaticData Class Doc Comment
 *
 * @category Class
 * @description Inverter Site Static Data
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InverterSiteStaticData implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'InverterSiteStaticData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'type' => 'string',
        'dynamic_data_metadata' => 'map[string,\Swagger\Client\Model\EnergyValueMetadata]',
        'timestamp_utc' => '\DateTime',
        'location' => 'AllOfInverterSiteStaticDataLocation',
        'technology_provider' => 'string',
        'remote_access_connection' => 'AllOfInverterSiteStaticDataRemoteAccessConnection',
        'approved_capacity_w' => 'int',
        'solar_retailer' => 'AllOfInverterSiteStaticDataSolarRetailer',
        'site_details' => 'AllOfInverterSiteStaticDataSiteDetails',
        'commissioning_date' => 'string',
        'nmi' => 'string',
        'latest_dynamic_data_utc' => '\DateTime',
        'status' => 'AllOfInverterSiteStaticDataStatus'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'type' => null,
        'dynamic_data_metadata' => null,
        'timestamp_utc' => 'date-time',
        'location' => null,
        'technology_provider' => null,
        'remote_access_connection' => null,
        'approved_capacity_w' => 'int32',
        'solar_retailer' => null,
        'site_details' => null,
        'commissioning_date' => null,
        'nmi' => null,
        'latest_dynamic_data_utc' => 'date-time',
        'status' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'Id',
        'type' => 'Type',
        'dynamic_data_metadata' => 'DynamicDataMetadata',
        'timestamp_utc' => 'TimestampUtc',
        'location' => 'Location',
        'technology_provider' => 'TechnologyProvider',
        'remote_access_connection' => 'RemoteAccessConnection',
        'approved_capacity_w' => 'ApprovedCapacityW',
        'solar_retailer' => 'SolarRetailer',
        'site_details' => 'SiteDetails',
        'commissioning_date' => 'CommissioningDate',
        'nmi' => 'NMI',
        'latest_dynamic_data_utc' => 'LatestDynamicDataUtc',
        'status' => 'Status'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'type' => 'setType',
        'dynamic_data_metadata' => 'setDynamicDataMetadata',
        'timestamp_utc' => 'setTimestampUtc',
        'location' => 'setLocation',
        'technology_provider' => 'setTechnologyProvider',
        'remote_access_connection' => 'setRemoteAccessConnection',
        'approved_capacity_w' => 'setApprovedCapacityW',
        'solar_retailer' => 'setSolarRetailer',
        'site_details' => 'setSiteDetails',
        'commissioning_date' => 'setCommissioningDate',
        'nmi' => 'setNmi',
        'latest_dynamic_data_utc' => 'setLatestDynamicDataUtc',
        'status' => 'setStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'type' => 'getType',
        'dynamic_data_metadata' => 'getDynamicDataMetadata',
        'timestamp_utc' => 'getTimestampUtc',
        'location' => 'getLocation',
        'technology_provider' => 'getTechnologyProvider',
        'remote_access_connection' => 'getRemoteAccessConnection',
        'approved_capacity_w' => 'getApprovedCapacityW',
        'solar_retailer' => 'getSolarRetailer',
        'site_details' => 'getSiteDetails',
        'commissioning_date' => 'getCommissioningDate',
        'nmi' => 'getNmi',
        'latest_dynamic_data_utc' => 'getLatestDynamicDataUtc',
        'status' => 'getStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['dynamic_data_metadata'] = isset($data['dynamic_data_metadata']) ? $data['dynamic_data_metadata'] : null;
        $this->container['timestamp_utc'] = isset($data['timestamp_utc']) ? $data['timestamp_utc'] : null;
        $this->container['location'] = isset($data['location']) ? $data['location'] : null;
        $this->container['technology_provider'] = isset($data['technology_provider']) ? $data['technology_provider'] : null;
        $this->container['remote_access_connection'] = isset($data['remote_access_connection']) ? $data['remote_access_connection'] : null;
        $this->container['approved_capacity_w'] = isset($data['approved_capacity_w']) ? $data['approved_capacity_w'] : null;
        $this->container['solar_retailer'] = isset($data['solar_retailer']) ? $data['solar_retailer'] : null;
        $this->container['site_details'] = isset($data['site_details']) ? $data['site_details'] : null;
        $this->container['commissioning_date'] = isset($data['commissioning_date']) ? $data['commissioning_date'] : null;
        $this->container['nmi'] = isset($data['nmi']) ? $data['nmi'] : null;
        $this->container['latest_dynamic_data_utc'] = isset($data['latest_dynamic_data_utc']) ? $data['latest_dynamic_data_utc'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['timestamp_utc'] === null) {
            $invalidProperties[] = "'timestamp_utc' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Gets the id of the node. This value is contextual, i.e. for a site it's SiteId
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type Gets the type of the node
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets dynamic_data_metadata
     *
     * @return map[string,\Swagger\Client\Model\EnergyValueMetadata]
     */
    public function getDynamicDataMetadata()
    {
        return $this->container['dynamic_data_metadata'];
    }

    /**
     * Sets dynamic_data_metadata
     *
     * @param map[string,\Swagger\Client\Model\EnergyValueMetadata] $dynamic_data_metadata Gets metadata about the dynamic data
     *
     * @return $this
     */
    public function setDynamicDataMetadata($dynamic_data_metadata)
    {
        $this->container['dynamic_data_metadata'] = $dynamic_data_metadata;

        return $this;
    }

    /**
     * Gets timestamp_utc
     *
     * @return \DateTime
     */
    public function getTimestampUtc()
    {
        return $this->container['timestamp_utc'];
    }

    /**
     * Sets timestamp_utc
     *
     * @param \DateTime $timestamp_utc Gets timestamp of the static portion of the datain ISO 8601 format.
     *
     * @return $this
     */
    public function setTimestampUtc($timestamp_utc)
    {
        $this->container['timestamp_utc'] = $timestamp_utc;

        return $this;
    }

    /**
     * Gets location
     *
     * @return AllOfInverterSiteStaticDataLocation
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param AllOfInverterSiteStaticDataLocation $location Location
     *
     * @return $this
     */
    public function setLocation($location)
    {
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets technology_provider
     *
     * @return string
     */
    public function getTechnologyProvider()
    {
        return $this->container['technology_provider'];
    }

    /**
     * Sets technology_provider
     *
     * @param string $technology_provider Technology Provider
     *
     * @return $this
     */
    public function setTechnologyProvider($technology_provider)
    {
        $this->container['technology_provider'] = $technology_provider;

        return $this;
    }

    /**
     * Gets remote_access_connection
     *
     * @return AllOfInverterSiteStaticDataRemoteAccessConnection
     */
    public function getRemoteAccessConnection()
    {
        return $this->container['remote_access_connection'];
    }

    /**
     * Sets remote_access_connection
     *
     * @param AllOfInverterSiteStaticDataRemoteAccessConnection $remote_access_connection Gets data about comms
     *
     * @return $this
     */
    public function setRemoteAccessConnection($remote_access_connection)
    {
        $this->container['remote_access_connection'] = $remote_access_connection;

        return $this;
    }

    /**
     * Gets approved_capacity_w
     *
     * @return int
     */
    public function getApprovedCapacityW()
    {
        return $this->container['approved_capacity_w'];
    }

    /**
     * Sets approved_capacity_w
     *
     * @param int $approved_capacity_w Approved Capacity W
     *
     * @return $this
     */
    public function setApprovedCapacityW($approved_capacity_w)
    {
        $this->container['approved_capacity_w'] = $approved_capacity_w;

        return $this;
    }

    /**
     * Gets solar_retailer
     *
     * @return AllOfInverterSiteStaticDataSolarRetailer
     */
    public function getSolarRetailer()
    {
        return $this->container['solar_retailer'];
    }

    /**
     * Sets solar_retailer
     *
     * @param AllOfInverterSiteStaticDataSolarRetailer $solar_retailer Solar Retailer
     *
     * @return $this
     */
    public function setSolarRetailer($solar_retailer)
    {
        $this->container['solar_retailer'] = $solar_retailer;

        return $this;
    }

    /**
     * Gets site_details
     *
     * @return AllOfInverterSiteStaticDataSiteDetails
     */
    public function getSiteDetails()
    {
        return $this->container['site_details'];
    }

    /**
     * Sets site_details
     *
     * @param AllOfInverterSiteStaticDataSiteDetails $site_details Site details
     *
     * @return $this
     */
    public function setSiteDetails($site_details)
    {
        $this->container['site_details'] = $site_details;

        return $this;
    }

    /**
     * Gets commissioning_date
     *
     * @return string
     */
    public function getCommissioningDate()
    {
        return $this->container['commissioning_date'];
    }

    /**
     * Sets commissioning_date
     *
     * @param string $commissioning_date Gets the commisioning date as yyyy-MM-dd
     *
     * @return $this
     */
    public function setCommissioningDate($commissioning_date)
    {
        $this->container['commissioning_date'] = $commissioning_date;

        return $this;
    }

    /**
     * Gets nmi
     *
     * @return string
     */
    public function getNmi()
    {
        return $this->container['nmi'];
    }

    /**
     * Sets nmi
     *
     * @param string $nmi National Meter Identifier
     *
     * @return $this
     */
    public function setNmi($nmi)
    {
        $this->container['nmi'] = $nmi;

        return $this;
    }

    /**
     * Gets latest_dynamic_data_utc
     *
     * @return \DateTime
     */
    public function getLatestDynamicDataUtc()
    {
        return $this->container['latest_dynamic_data_utc'];
    }

    /**
     * Sets latest_dynamic_data_utc
     *
     * @param \DateTime $latest_dynamic_data_utc Timestamp of the most recent dynamic data
     *
     * @return $this
     */
    public function setLatestDynamicDataUtc($latest_dynamic_data_utc)
    {
        $this->container['latest_dynamic_data_utc'] = $latest_dynamic_data_utc;

        return $this;
    }

    /**
     * Gets status
     *
     * @return AllOfInverterSiteStaticDataStatus
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param AllOfInverterSiteStaticDataStatus $status System Status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
