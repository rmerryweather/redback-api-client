<?php
/**
 * InverterNodeStaticData
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Redback API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 * Contact: ITOps@redbacktech.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.64
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * InverterNodeStaticData Class Doc Comment
 *
 * @category Class
 * @description Static data about an inverter node.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InverterNodeStaticData implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'InverterNodeStaticData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'type' => 'string',
        'dynamic_data_metadata' => 'map[string,\Swagger\Client\Model\EnergyValueMetadata]',
        'model_name' => 'string',
        'battery_count' => 'int',
        'software_version' => 'string',
        'firmware_version' => 'string',
        'battery_models' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'type' => null,
        'dynamic_data_metadata' => null,
        'model_name' => null,
        'battery_count' => 'int32',
        'software_version' => null,
        'firmware_version' => null,
        'battery_models' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'Id',
        'type' => 'Type',
        'dynamic_data_metadata' => 'DynamicDataMetadata',
        'model_name' => 'ModelName',
        'battery_count' => 'BatteryCount',
        'software_version' => 'SoftwareVersion',
        'firmware_version' => 'FirmwareVersion',
        'battery_models' => 'BatteryModels'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'type' => 'setType',
        'dynamic_data_metadata' => 'setDynamicDataMetadata',
        'model_name' => 'setModelName',
        'battery_count' => 'setBatteryCount',
        'software_version' => 'setSoftwareVersion',
        'firmware_version' => 'setFirmwareVersion',
        'battery_models' => 'setBatteryModels'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'type' => 'getType',
        'dynamic_data_metadata' => 'getDynamicDataMetadata',
        'model_name' => 'getModelName',
        'battery_count' => 'getBatteryCount',
        'software_version' => 'getSoftwareVersion',
        'firmware_version' => 'getFirmwareVersion',
        'battery_models' => 'getBatteryModels'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['dynamic_data_metadata'] = isset($data['dynamic_data_metadata']) ? $data['dynamic_data_metadata'] : null;
        $this->container['model_name'] = isset($data['model_name']) ? $data['model_name'] : null;
        $this->container['battery_count'] = isset($data['battery_count']) ? $data['battery_count'] : null;
        $this->container['software_version'] = isset($data['software_version']) ? $data['software_version'] : null;
        $this->container['firmware_version'] = isset($data['firmware_version']) ? $data['firmware_version'] : null;
        $this->container['battery_models'] = isset($data['battery_models']) ? $data['battery_models'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['battery_count'] === null) {
            $invalidProperties[] = "'battery_count' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Gets the id of the node. This value is contextual, i.e. for a site it's SiteId
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type Gets the type of the node
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets dynamic_data_metadata
     *
     * @return map[string,\Swagger\Client\Model\EnergyValueMetadata]
     */
    public function getDynamicDataMetadata()
    {
        return $this->container['dynamic_data_metadata'];
    }

    /**
     * Sets dynamic_data_metadata
     *
     * @param map[string,\Swagger\Client\Model\EnergyValueMetadata] $dynamic_data_metadata Gets metadata about the dynamic data
     *
     * @return $this
     */
    public function setDynamicDataMetadata($dynamic_data_metadata)
    {
        $this->container['dynamic_data_metadata'] = $dynamic_data_metadata;

        return $this;
    }

    /**
     * Gets model_name
     *
     * @return string
     */
    public function getModelName()
    {
        return $this->container['model_name'];
    }

    /**
     * Sets model_name
     *
     * @param string $model_name Model
     *
     * @return $this
     */
    public function setModelName($model_name)
    {
        $this->container['model_name'] = $model_name;

        return $this;
    }

    /**
     * Gets battery_count
     *
     * @return int
     */
    public function getBatteryCount()
    {
        return $this->container['battery_count'];
    }

    /**
     * Sets battery_count
     *
     * @param int $battery_count Number of batteries
     *
     * @return $this
     */
    public function setBatteryCount($battery_count)
    {
        $this->container['battery_count'] = $battery_count;

        return $this;
    }

    /**
     * Gets software_version
     *
     * @return string
     */
    public function getSoftwareVersion()
    {
        return $this->container['software_version'];
    }

    /**
     * Sets software_version
     *
     * @param string $software_version Software version
     *
     * @return $this
     */
    public function setSoftwareVersion($software_version)
    {
        $this->container['software_version'] = $software_version;

        return $this;
    }

    /**
     * Gets firmware_version
     *
     * @return string
     */
    public function getFirmwareVersion()
    {
        return $this->container['firmware_version'];
    }

    /**
     * Sets firmware_version
     *
     * @param string $firmware_version Firmware version
     *
     * @return $this
     */
    public function setFirmwareVersion($firmware_version)
    {
        $this->container['firmware_version'] = $firmware_version;

        return $this;
    }

    /**
     * Gets battery_models
     *
     * @return string[]
     */
    public function getBatteryModels()
    {
        return $this->container['battery_models'];
    }

    /**
     * Sets battery_models
     *
     * @param string[] $battery_models Battery models
     *
     * @return $this
     */
    public function setBatteryModels($battery_models)
    {
        $this->container['battery_models'] = $battery_models;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
