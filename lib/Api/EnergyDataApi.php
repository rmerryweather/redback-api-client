<?php
/**
 * EnergyDataApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Redback API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 * Contact: ITOps@redbacktech.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.64
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * EnergyDataApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EnergyDataApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation energyDataGet
     *
     * Gets available sites.
     *
     * @param  int $page Zero based page id (optional, default to 0)
     * @param  int $page_size Size of the page. Max &#x3D; 1000 (optional, default to 100)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResultPagedOfString
     */
    public function energyDataGet($page = '0', $page_size = '100')
    {
        list($response) = $this->energyDataGetWithHttpInfo($page, $page_size);
        return $response;
    }

    /**
     * Operation energyDataGetWithHttpInfo
     *
     * Gets available sites.
     *
     * @param  int $page Zero based page id (optional, default to 0)
     * @param  int $page_size Size of the page. Max &#x3D; 1000 (optional, default to 100)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResultPagedOfString, HTTP status code, HTTP response headers (array of strings)
     */
    public function energyDataGetWithHttpInfo($page = '0', $page_size = '100')
    {
        $returnType = '\Swagger\Client\Model\ResultPagedOfString';
        $request = $this->energyDataGetRequest($page, $page_size);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResultPagedOfString',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation energyDataGetAsync
     *
     * Gets available sites.
     *
     * @param  int $page Zero based page id (optional, default to 0)
     * @param  int $page_size Size of the page. Max &#x3D; 1000 (optional, default to 100)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function energyDataGetAsync($page = '0', $page_size = '100')
    {
        return $this->energyDataGetAsyncWithHttpInfo($page, $page_size)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation energyDataGetAsyncWithHttpInfo
     *
     * Gets available sites.
     *
     * @param  int $page Zero based page id (optional, default to 0)
     * @param  int $page_size Size of the page. Max &#x3D; 1000 (optional, default to 100)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function energyDataGetAsyncWithHttpInfo($page = '0', $page_size = '100')
    {
        $returnType = '\Swagger\Client\Model\ResultPagedOfString';
        $request = $this->energyDataGetRequest($page, $page_size);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'energyDataGet'
     *
     * @param  int $page Zero based page id (optional, default to 0)
     * @param  int $page_size Size of the page. Max &#x3D; 1000 (optional, default to 100)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function energyDataGetRequest($page = '0', $page_size = '100')
    {

        $resourcePath = '/Api/v2/EnergyData';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page, 'int32');
        }
        // query params
        if ($page_size !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($page_size, 'int32');
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation energyDataGetDynamic20
     *
     * Gets dynamic data for a site.
     *
     * @param  string $site_id Id of the site (required)
     * @param  bool $metadata Whether to provide metadata (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResultSingleOfInverterSiteDynamicData
     */
    public function energyDataGetDynamic20($site_id, $metadata = null)
    {
        list($response) = $this->energyDataGetDynamic20WithHttpInfo($site_id, $metadata);
        return $response;
    }

    /**
     * Operation energyDataGetDynamic20WithHttpInfo
     *
     * Gets dynamic data for a site.
     *
     * @param  string $site_id Id of the site (required)
     * @param  bool $metadata Whether to provide metadata (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResultSingleOfInverterSiteDynamicData, HTTP status code, HTTP response headers (array of strings)
     */
    public function energyDataGetDynamic20WithHttpInfo($site_id, $metadata = null)
    {
        $returnType = '\Swagger\Client\Model\ResultSingleOfInverterSiteDynamicData';
        $request = $this->energyDataGetDynamic20Request($site_id, $metadata);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResultSingleOfInverterSiteDynamicData',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation energyDataGetDynamic20Async
     *
     * Gets dynamic data for a site.
     *
     * @param  string $site_id Id of the site (required)
     * @param  bool $metadata Whether to provide metadata (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function energyDataGetDynamic20Async($site_id, $metadata = null)
    {
        return $this->energyDataGetDynamic20AsyncWithHttpInfo($site_id, $metadata)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation energyDataGetDynamic20AsyncWithHttpInfo
     *
     * Gets dynamic data for a site.
     *
     * @param  string $site_id Id of the site (required)
     * @param  bool $metadata Whether to provide metadata (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function energyDataGetDynamic20AsyncWithHttpInfo($site_id, $metadata = null)
    {
        $returnType = '\Swagger\Client\Model\ResultSingleOfInverterSiteDynamicData';
        $request = $this->energyDataGetDynamic20Request($site_id, $metadata);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'energyDataGetDynamic20'
     *
     * @param  string $site_id Id of the site (required)
     * @param  bool $metadata Whether to provide metadata (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function energyDataGetDynamic20Request($site_id, $metadata = null)
    {
        // verify the required parameter 'site_id' is set
        if ($site_id === null || (is_array($site_id) && count($site_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $site_id when calling energyDataGetDynamic20'
            );
        }

        $resourcePath = '/Api/v2/EnergyData/{siteId}/Dynamic';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($metadata !== null) {
            $queryParams['metadata'] = ObjectSerializer::toQueryValue($metadata, null);
        }

        // path params
        if ($site_id !== null) {
            $resourcePath = str_replace(
                '{' . 'siteId' . '}',
                ObjectSerializer::toPathValue($site_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation energyDataGetDynamicAt20
     *
     * Gets dynamic data for a site at a timestamp.
     *
     * @param  string $site_id Id of the site (required)
     * @param  string $timestamp Utc timestamp in the &#x27;yyyyMMddTHHmmssZ&#x27; format (required)
     * @param  bool $metadata Whether to provide metadata (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResultSingleWithTimeTravelOfInverterSiteDynamicData
     */
    public function energyDataGetDynamicAt20($site_id, $timestamp, $metadata = null)
    {
        list($response) = $this->energyDataGetDynamicAt20WithHttpInfo($site_id, $timestamp, $metadata);
        return $response;
    }

    /**
     * Operation energyDataGetDynamicAt20WithHttpInfo
     *
     * Gets dynamic data for a site at a timestamp.
     *
     * @param  string $site_id Id of the site (required)
     * @param  string $timestamp Utc timestamp in the &#x27;yyyyMMddTHHmmssZ&#x27; format (required)
     * @param  bool $metadata Whether to provide metadata (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResultSingleWithTimeTravelOfInverterSiteDynamicData, HTTP status code, HTTP response headers (array of strings)
     */
    public function energyDataGetDynamicAt20WithHttpInfo($site_id, $timestamp, $metadata = null)
    {
        $returnType = '\Swagger\Client\Model\ResultSingleWithTimeTravelOfInverterSiteDynamicData';
        $request = $this->energyDataGetDynamicAt20Request($site_id, $timestamp, $metadata);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResultSingleWithTimeTravelOfInverterSiteDynamicData',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation energyDataGetDynamicAt20Async
     *
     * Gets dynamic data for a site at a timestamp.
     *
     * @param  string $site_id Id of the site (required)
     * @param  string $timestamp Utc timestamp in the &#x27;yyyyMMddTHHmmssZ&#x27; format (required)
     * @param  bool $metadata Whether to provide metadata (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function energyDataGetDynamicAt20Async($site_id, $timestamp, $metadata = null)
    {
        return $this->energyDataGetDynamicAt20AsyncWithHttpInfo($site_id, $timestamp, $metadata)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation energyDataGetDynamicAt20AsyncWithHttpInfo
     *
     * Gets dynamic data for a site at a timestamp.
     *
     * @param  string $site_id Id of the site (required)
     * @param  string $timestamp Utc timestamp in the &#x27;yyyyMMddTHHmmssZ&#x27; format (required)
     * @param  bool $metadata Whether to provide metadata (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function energyDataGetDynamicAt20AsyncWithHttpInfo($site_id, $timestamp, $metadata = null)
    {
        $returnType = '\Swagger\Client\Model\ResultSingleWithTimeTravelOfInverterSiteDynamicData';
        $request = $this->energyDataGetDynamicAt20Request($site_id, $timestamp, $metadata);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'energyDataGetDynamicAt20'
     *
     * @param  string $site_id Id of the site (required)
     * @param  string $timestamp Utc timestamp in the &#x27;yyyyMMddTHHmmssZ&#x27; format (required)
     * @param  bool $metadata Whether to provide metadata (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function energyDataGetDynamicAt20Request($site_id, $timestamp, $metadata = null)
    {
        // verify the required parameter 'site_id' is set
        if ($site_id === null || (is_array($site_id) && count($site_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $site_id when calling energyDataGetDynamicAt20'
            );
        }
        // verify the required parameter 'timestamp' is set
        if ($timestamp === null || (is_array($timestamp) && count($timestamp) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $timestamp when calling energyDataGetDynamicAt20'
            );
        }

        $resourcePath = '/Api/v2/EnergyData/{siteId}/Dynamic/At/{timestamp}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($metadata !== null) {
            $queryParams['metadata'] = ObjectSerializer::toQueryValue($metadata, null);
        }

        // path params
        if ($site_id !== null) {
            $resourcePath = str_replace(
                '{' . 'siteId' . '}',
                ObjectSerializer::toPathValue($site_id),
                $resourcePath
            );
        }
        // path params
        if ($timestamp !== null) {
            $resourcePath = str_replace(
                '{' . 'timestamp' . '}',
                ObjectSerializer::toPathValue($timestamp),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation energyDataGetDynamicAtByNmi20
     *
     * Gets dynamic data for a site at a timestamp.
     *
     * @param  string $nmi National Metering Identifier (required)
     * @param  string $timestamp Utc timestamp in the &#x27;yyyyMMddTHHmmssZ&#x27; format (required)
     * @param  bool $metadata Whether to provide metadata (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResultSingleWithTimeTravelOfInverterSiteDynamicData
     */
    public function energyDataGetDynamicAtByNmi20($nmi, $timestamp, $metadata = null)
    {
        list($response) = $this->energyDataGetDynamicAtByNmi20WithHttpInfo($nmi, $timestamp, $metadata);
        return $response;
    }

    /**
     * Operation energyDataGetDynamicAtByNmi20WithHttpInfo
     *
     * Gets dynamic data for a site at a timestamp.
     *
     * @param  string $nmi National Metering Identifier (required)
     * @param  string $timestamp Utc timestamp in the &#x27;yyyyMMddTHHmmssZ&#x27; format (required)
     * @param  bool $metadata Whether to provide metadata (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResultSingleWithTimeTravelOfInverterSiteDynamicData, HTTP status code, HTTP response headers (array of strings)
     */
    public function energyDataGetDynamicAtByNmi20WithHttpInfo($nmi, $timestamp, $metadata = null)
    {
        $returnType = '\Swagger\Client\Model\ResultSingleWithTimeTravelOfInverterSiteDynamicData';
        $request = $this->energyDataGetDynamicAtByNmi20Request($nmi, $timestamp, $metadata);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResultSingleWithTimeTravelOfInverterSiteDynamicData',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation energyDataGetDynamicAtByNmi20Async
     *
     * Gets dynamic data for a site at a timestamp.
     *
     * @param  string $nmi National Metering Identifier (required)
     * @param  string $timestamp Utc timestamp in the &#x27;yyyyMMddTHHmmssZ&#x27; format (required)
     * @param  bool $metadata Whether to provide metadata (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function energyDataGetDynamicAtByNmi20Async($nmi, $timestamp, $metadata = null)
    {
        return $this->energyDataGetDynamicAtByNmi20AsyncWithHttpInfo($nmi, $timestamp, $metadata)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation energyDataGetDynamicAtByNmi20AsyncWithHttpInfo
     *
     * Gets dynamic data for a site at a timestamp.
     *
     * @param  string $nmi National Metering Identifier (required)
     * @param  string $timestamp Utc timestamp in the &#x27;yyyyMMddTHHmmssZ&#x27; format (required)
     * @param  bool $metadata Whether to provide metadata (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function energyDataGetDynamicAtByNmi20AsyncWithHttpInfo($nmi, $timestamp, $metadata = null)
    {
        $returnType = '\Swagger\Client\Model\ResultSingleWithTimeTravelOfInverterSiteDynamicData';
        $request = $this->energyDataGetDynamicAtByNmi20Request($nmi, $timestamp, $metadata);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'energyDataGetDynamicAtByNmi20'
     *
     * @param  string $nmi National Metering Identifier (required)
     * @param  string $timestamp Utc timestamp in the &#x27;yyyyMMddTHHmmssZ&#x27; format (required)
     * @param  bool $metadata Whether to provide metadata (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function energyDataGetDynamicAtByNmi20Request($nmi, $timestamp, $metadata = null)
    {
        // verify the required parameter 'nmi' is set
        if ($nmi === null || (is_array($nmi) && count($nmi) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nmi when calling energyDataGetDynamicAtByNmi20'
            );
        }
        // verify the required parameter 'timestamp' is set
        if ($timestamp === null || (is_array($timestamp) && count($timestamp) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $timestamp when calling energyDataGetDynamicAtByNmi20'
            );
        }

        $resourcePath = '/Api/v2/EnergyData/{nmi}/DynamicByNmi/At/{timestamp}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($metadata !== null) {
            $queryParams['metadata'] = ObjectSerializer::toQueryValue($metadata, null);
        }

        // path params
        if ($nmi !== null) {
            $resourcePath = str_replace(
                '{' . 'nmi' . '}',
                ObjectSerializer::toPathValue($nmi),
                $resourcePath
            );
        }
        // path params
        if ($timestamp !== null) {
            $resourcePath = str_replace(
                '{' . 'timestamp' . '}',
                ObjectSerializer::toPathValue($timestamp),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation energyDataGetDynamicAtBySerialNumber20
     *
     * Gets dynamic data for an inverter at a timestamp.
     *
     * @param  string $serial_number Serial number (required)
     * @param  string $timestamp Utc timestamp in the &#x27;yyyyMMddTHHmmssZ&#x27; format (required)
     * @param  bool $metadata Whether to provide metadata (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResultSingleWithTimeTravelOfInverterSiteDynamicData
     */
    public function energyDataGetDynamicAtBySerialNumber20($serial_number, $timestamp, $metadata = null)
    {
        list($response) = $this->energyDataGetDynamicAtBySerialNumber20WithHttpInfo($serial_number, $timestamp, $metadata);
        return $response;
    }

    /**
     * Operation energyDataGetDynamicAtBySerialNumber20WithHttpInfo
     *
     * Gets dynamic data for an inverter at a timestamp.
     *
     * @param  string $serial_number Serial number (required)
     * @param  string $timestamp Utc timestamp in the &#x27;yyyyMMddTHHmmssZ&#x27; format (required)
     * @param  bool $metadata Whether to provide metadata (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResultSingleWithTimeTravelOfInverterSiteDynamicData, HTTP status code, HTTP response headers (array of strings)
     */
    public function energyDataGetDynamicAtBySerialNumber20WithHttpInfo($serial_number, $timestamp, $metadata = null)
    {
        $returnType = '\Swagger\Client\Model\ResultSingleWithTimeTravelOfInverterSiteDynamicData';
        $request = $this->energyDataGetDynamicAtBySerialNumber20Request($serial_number, $timestamp, $metadata);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResultSingleWithTimeTravelOfInverterSiteDynamicData',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation energyDataGetDynamicAtBySerialNumber20Async
     *
     * Gets dynamic data for an inverter at a timestamp.
     *
     * @param  string $serial_number Serial number (required)
     * @param  string $timestamp Utc timestamp in the &#x27;yyyyMMddTHHmmssZ&#x27; format (required)
     * @param  bool $metadata Whether to provide metadata (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function energyDataGetDynamicAtBySerialNumber20Async($serial_number, $timestamp, $metadata = null)
    {
        return $this->energyDataGetDynamicAtBySerialNumber20AsyncWithHttpInfo($serial_number, $timestamp, $metadata)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation energyDataGetDynamicAtBySerialNumber20AsyncWithHttpInfo
     *
     * Gets dynamic data for an inverter at a timestamp.
     *
     * @param  string $serial_number Serial number (required)
     * @param  string $timestamp Utc timestamp in the &#x27;yyyyMMddTHHmmssZ&#x27; format (required)
     * @param  bool $metadata Whether to provide metadata (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function energyDataGetDynamicAtBySerialNumber20AsyncWithHttpInfo($serial_number, $timestamp, $metadata = null)
    {
        $returnType = '\Swagger\Client\Model\ResultSingleWithTimeTravelOfInverterSiteDynamicData';
        $request = $this->energyDataGetDynamicAtBySerialNumber20Request($serial_number, $timestamp, $metadata);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'energyDataGetDynamicAtBySerialNumber20'
     *
     * @param  string $serial_number Serial number (required)
     * @param  string $timestamp Utc timestamp in the &#x27;yyyyMMddTHHmmssZ&#x27; format (required)
     * @param  bool $metadata Whether to provide metadata (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function energyDataGetDynamicAtBySerialNumber20Request($serial_number, $timestamp, $metadata = null)
    {
        // verify the required parameter 'serial_number' is set
        if ($serial_number === null || (is_array($serial_number) && count($serial_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $serial_number when calling energyDataGetDynamicAtBySerialNumber20'
            );
        }
        // verify the required parameter 'timestamp' is set
        if ($timestamp === null || (is_array($timestamp) && count($timestamp) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $timestamp when calling energyDataGetDynamicAtBySerialNumber20'
            );
        }

        $resourcePath = '/Api/v2/EnergyData/{serialNumber}/Dynamic/BySerialNumber/At/{timestamp}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($metadata !== null) {
            $queryParams['metadata'] = ObjectSerializer::toQueryValue($metadata, null);
        }

        // path params
        if ($serial_number !== null) {
            $resourcePath = str_replace(
                '{' . 'serialNumber' . '}',
                ObjectSerializer::toPathValue($serial_number),
                $resourcePath
            );
        }
        // path params
        if ($timestamp !== null) {
            $resourcePath = str_replace(
                '{' . 'timestamp' . '}',
                ObjectSerializer::toPathValue($timestamp),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation energyDataGetDynamicBetween20
     *
     * Gets dynamic data records between timestamps.
     *
     * @param  string $site_id Id of the site (required)
     * @param  string $starttimestamp Start Utc timestamp in the &#x27;yyyyMMddTHHmmssZ&#x27; format (required)
     * @param  string $endtimestamp End Utc timestamp in the &#x27;yyyyMMddTHHmmssZ&#x27; format. Max difference is 60 minutes (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResultMultipleOfInverterSiteDynamicData
     */
    public function energyDataGetDynamicBetween20($site_id, $starttimestamp, $endtimestamp)
    {
        list($response) = $this->energyDataGetDynamicBetween20WithHttpInfo($site_id, $starttimestamp, $endtimestamp);
        return $response;
    }

    /**
     * Operation energyDataGetDynamicBetween20WithHttpInfo
     *
     * Gets dynamic data records between timestamps.
     *
     * @param  string $site_id Id of the site (required)
     * @param  string $starttimestamp Start Utc timestamp in the &#x27;yyyyMMddTHHmmssZ&#x27; format (required)
     * @param  string $endtimestamp End Utc timestamp in the &#x27;yyyyMMddTHHmmssZ&#x27; format. Max difference is 60 minutes (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResultMultipleOfInverterSiteDynamicData, HTTP status code, HTTP response headers (array of strings)
     */
    public function energyDataGetDynamicBetween20WithHttpInfo($site_id, $starttimestamp, $endtimestamp)
    {
        $returnType = '\Swagger\Client\Model\ResultMultipleOfInverterSiteDynamicData';
        $request = $this->energyDataGetDynamicBetween20Request($site_id, $starttimestamp, $endtimestamp);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResultMultipleOfInverterSiteDynamicData',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation energyDataGetDynamicBetween20Async
     *
     * Gets dynamic data records between timestamps.
     *
     * @param  string $site_id Id of the site (required)
     * @param  string $starttimestamp Start Utc timestamp in the &#x27;yyyyMMddTHHmmssZ&#x27; format (required)
     * @param  string $endtimestamp End Utc timestamp in the &#x27;yyyyMMddTHHmmssZ&#x27; format. Max difference is 60 minutes (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function energyDataGetDynamicBetween20Async($site_id, $starttimestamp, $endtimestamp)
    {
        return $this->energyDataGetDynamicBetween20AsyncWithHttpInfo($site_id, $starttimestamp, $endtimestamp)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation energyDataGetDynamicBetween20AsyncWithHttpInfo
     *
     * Gets dynamic data records between timestamps.
     *
     * @param  string $site_id Id of the site (required)
     * @param  string $starttimestamp Start Utc timestamp in the &#x27;yyyyMMddTHHmmssZ&#x27; format (required)
     * @param  string $endtimestamp End Utc timestamp in the &#x27;yyyyMMddTHHmmssZ&#x27; format. Max difference is 60 minutes (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function energyDataGetDynamicBetween20AsyncWithHttpInfo($site_id, $starttimestamp, $endtimestamp)
    {
        $returnType = '\Swagger\Client\Model\ResultMultipleOfInverterSiteDynamicData';
        $request = $this->energyDataGetDynamicBetween20Request($site_id, $starttimestamp, $endtimestamp);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'energyDataGetDynamicBetween20'
     *
     * @param  string $site_id Id of the site (required)
     * @param  string $starttimestamp Start Utc timestamp in the &#x27;yyyyMMddTHHmmssZ&#x27; format (required)
     * @param  string $endtimestamp End Utc timestamp in the &#x27;yyyyMMddTHHmmssZ&#x27; format. Max difference is 60 minutes (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function energyDataGetDynamicBetween20Request($site_id, $starttimestamp, $endtimestamp)
    {
        // verify the required parameter 'site_id' is set
        if ($site_id === null || (is_array($site_id) && count($site_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $site_id when calling energyDataGetDynamicBetween20'
            );
        }
        // verify the required parameter 'starttimestamp' is set
        if ($starttimestamp === null || (is_array($starttimestamp) && count($starttimestamp) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $starttimestamp when calling energyDataGetDynamicBetween20'
            );
        }
        // verify the required parameter 'endtimestamp' is set
        if ($endtimestamp === null || (is_array($endtimestamp) && count($endtimestamp) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $endtimestamp when calling energyDataGetDynamicBetween20'
            );
        }

        $resourcePath = '/Api/v2/EnergyData/{siteId}/Dynamic/From/{starttimestamp}/To/{endtimestamp}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($site_id !== null) {
            $resourcePath = str_replace(
                '{' . 'siteId' . '}',
                ObjectSerializer::toPathValue($site_id),
                $resourcePath
            );
        }
        // path params
        if ($starttimestamp !== null) {
            $resourcePath = str_replace(
                '{' . 'starttimestamp' . '}',
                ObjectSerializer::toPathValue($starttimestamp),
                $resourcePath
            );
        }
        // path params
        if ($endtimestamp !== null) {
            $resourcePath = str_replace(
                '{' . 'endtimestamp' . '}',
                ObjectSerializer::toPathValue($endtimestamp),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation energyDataGetDynamicBetweenByNmi20
     *
     * Gets dynamic data records between timestamps.
     *
     * @param  string $nmi National Metering Identifier (required)
     * @param  string $starttimestamp Start Utc timestamp in the &#x27;yyyyMMddTHHmmssZ&#x27; format (required)
     * @param  string $endtimestamp End Utc timestamp in the &#x27;yyyyMMddTHHmmssZ&#x27; format. Max difference is 60 minutes (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResultMultipleOfInverterSiteDynamicData
     */
    public function energyDataGetDynamicBetweenByNmi20($nmi, $starttimestamp, $endtimestamp)
    {
        list($response) = $this->energyDataGetDynamicBetweenByNmi20WithHttpInfo($nmi, $starttimestamp, $endtimestamp);
        return $response;
    }

    /**
     * Operation energyDataGetDynamicBetweenByNmi20WithHttpInfo
     *
     * Gets dynamic data records between timestamps.
     *
     * @param  string $nmi National Metering Identifier (required)
     * @param  string $starttimestamp Start Utc timestamp in the &#x27;yyyyMMddTHHmmssZ&#x27; format (required)
     * @param  string $endtimestamp End Utc timestamp in the &#x27;yyyyMMddTHHmmssZ&#x27; format. Max difference is 60 minutes (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResultMultipleOfInverterSiteDynamicData, HTTP status code, HTTP response headers (array of strings)
     */
    public function energyDataGetDynamicBetweenByNmi20WithHttpInfo($nmi, $starttimestamp, $endtimestamp)
    {
        $returnType = '\Swagger\Client\Model\ResultMultipleOfInverterSiteDynamicData';
        $request = $this->energyDataGetDynamicBetweenByNmi20Request($nmi, $starttimestamp, $endtimestamp);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResultMultipleOfInverterSiteDynamicData',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation energyDataGetDynamicBetweenByNmi20Async
     *
     * Gets dynamic data records between timestamps.
     *
     * @param  string $nmi National Metering Identifier (required)
     * @param  string $starttimestamp Start Utc timestamp in the &#x27;yyyyMMddTHHmmssZ&#x27; format (required)
     * @param  string $endtimestamp End Utc timestamp in the &#x27;yyyyMMddTHHmmssZ&#x27; format. Max difference is 60 minutes (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function energyDataGetDynamicBetweenByNmi20Async($nmi, $starttimestamp, $endtimestamp)
    {
        return $this->energyDataGetDynamicBetweenByNmi20AsyncWithHttpInfo($nmi, $starttimestamp, $endtimestamp)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation energyDataGetDynamicBetweenByNmi20AsyncWithHttpInfo
     *
     * Gets dynamic data records between timestamps.
     *
     * @param  string $nmi National Metering Identifier (required)
     * @param  string $starttimestamp Start Utc timestamp in the &#x27;yyyyMMddTHHmmssZ&#x27; format (required)
     * @param  string $endtimestamp End Utc timestamp in the &#x27;yyyyMMddTHHmmssZ&#x27; format. Max difference is 60 minutes (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function energyDataGetDynamicBetweenByNmi20AsyncWithHttpInfo($nmi, $starttimestamp, $endtimestamp)
    {
        $returnType = '\Swagger\Client\Model\ResultMultipleOfInverterSiteDynamicData';
        $request = $this->energyDataGetDynamicBetweenByNmi20Request($nmi, $starttimestamp, $endtimestamp);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'energyDataGetDynamicBetweenByNmi20'
     *
     * @param  string $nmi National Metering Identifier (required)
     * @param  string $starttimestamp Start Utc timestamp in the &#x27;yyyyMMddTHHmmssZ&#x27; format (required)
     * @param  string $endtimestamp End Utc timestamp in the &#x27;yyyyMMddTHHmmssZ&#x27; format. Max difference is 60 minutes (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function energyDataGetDynamicBetweenByNmi20Request($nmi, $starttimestamp, $endtimestamp)
    {
        // verify the required parameter 'nmi' is set
        if ($nmi === null || (is_array($nmi) && count($nmi) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nmi when calling energyDataGetDynamicBetweenByNmi20'
            );
        }
        // verify the required parameter 'starttimestamp' is set
        if ($starttimestamp === null || (is_array($starttimestamp) && count($starttimestamp) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $starttimestamp when calling energyDataGetDynamicBetweenByNmi20'
            );
        }
        // verify the required parameter 'endtimestamp' is set
        if ($endtimestamp === null || (is_array($endtimestamp) && count($endtimestamp) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $endtimestamp when calling energyDataGetDynamicBetweenByNmi20'
            );
        }

        $resourcePath = '/Api/v2/EnergyData/{nmi}/DynamicByNmi/From/{starttimestamp}/To/{endtimestamp}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($nmi !== null) {
            $resourcePath = str_replace(
                '{' . 'nmi' . '}',
                ObjectSerializer::toPathValue($nmi),
                $resourcePath
            );
        }
        // path params
        if ($starttimestamp !== null) {
            $resourcePath = str_replace(
                '{' . 'starttimestamp' . '}',
                ObjectSerializer::toPathValue($starttimestamp),
                $resourcePath
            );
        }
        // path params
        if ($endtimestamp !== null) {
            $resourcePath = str_replace(
                '{' . 'endtimestamp' . '}',
                ObjectSerializer::toPathValue($endtimestamp),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation energyDataGetDynamicBetweenBySerialNumber20
     *
     * Gets dynamic data records for an inverter between timestamps.
     *
     * @param  string $serial_number Serial number (required)
     * @param  string $starttimestamp Start Utc timestamp in the &#x27;yyyyMMddTHHmmssZ&#x27; format (required)
     * @param  string $endtimestamp End Utc timestamp in the &#x27;yyyyMMddTHHmmssZ&#x27; format. Max difference is 60 minutes (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResultMultipleOfInverterSiteDynamicData
     */
    public function energyDataGetDynamicBetweenBySerialNumber20($serial_number, $starttimestamp, $endtimestamp)
    {
        list($response) = $this->energyDataGetDynamicBetweenBySerialNumber20WithHttpInfo($serial_number, $starttimestamp, $endtimestamp);
        return $response;
    }

    /**
     * Operation energyDataGetDynamicBetweenBySerialNumber20WithHttpInfo
     *
     * Gets dynamic data records for an inverter between timestamps.
     *
     * @param  string $serial_number Serial number (required)
     * @param  string $starttimestamp Start Utc timestamp in the &#x27;yyyyMMddTHHmmssZ&#x27; format (required)
     * @param  string $endtimestamp End Utc timestamp in the &#x27;yyyyMMddTHHmmssZ&#x27; format. Max difference is 60 minutes (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResultMultipleOfInverterSiteDynamicData, HTTP status code, HTTP response headers (array of strings)
     */
    public function energyDataGetDynamicBetweenBySerialNumber20WithHttpInfo($serial_number, $starttimestamp, $endtimestamp)
    {
        $returnType = '\Swagger\Client\Model\ResultMultipleOfInverterSiteDynamicData';
        $request = $this->energyDataGetDynamicBetweenBySerialNumber20Request($serial_number, $starttimestamp, $endtimestamp);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResultMultipleOfInverterSiteDynamicData',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation energyDataGetDynamicBetweenBySerialNumber20Async
     *
     * Gets dynamic data records for an inverter between timestamps.
     *
     * @param  string $serial_number Serial number (required)
     * @param  string $starttimestamp Start Utc timestamp in the &#x27;yyyyMMddTHHmmssZ&#x27; format (required)
     * @param  string $endtimestamp End Utc timestamp in the &#x27;yyyyMMddTHHmmssZ&#x27; format. Max difference is 60 minutes (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function energyDataGetDynamicBetweenBySerialNumber20Async($serial_number, $starttimestamp, $endtimestamp)
    {
        return $this->energyDataGetDynamicBetweenBySerialNumber20AsyncWithHttpInfo($serial_number, $starttimestamp, $endtimestamp)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation energyDataGetDynamicBetweenBySerialNumber20AsyncWithHttpInfo
     *
     * Gets dynamic data records for an inverter between timestamps.
     *
     * @param  string $serial_number Serial number (required)
     * @param  string $starttimestamp Start Utc timestamp in the &#x27;yyyyMMddTHHmmssZ&#x27; format (required)
     * @param  string $endtimestamp End Utc timestamp in the &#x27;yyyyMMddTHHmmssZ&#x27; format. Max difference is 60 minutes (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function energyDataGetDynamicBetweenBySerialNumber20AsyncWithHttpInfo($serial_number, $starttimestamp, $endtimestamp)
    {
        $returnType = '\Swagger\Client\Model\ResultMultipleOfInverterSiteDynamicData';
        $request = $this->energyDataGetDynamicBetweenBySerialNumber20Request($serial_number, $starttimestamp, $endtimestamp);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'energyDataGetDynamicBetweenBySerialNumber20'
     *
     * @param  string $serial_number Serial number (required)
     * @param  string $starttimestamp Start Utc timestamp in the &#x27;yyyyMMddTHHmmssZ&#x27; format (required)
     * @param  string $endtimestamp End Utc timestamp in the &#x27;yyyyMMddTHHmmssZ&#x27; format. Max difference is 60 minutes (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function energyDataGetDynamicBetweenBySerialNumber20Request($serial_number, $starttimestamp, $endtimestamp)
    {
        // verify the required parameter 'serial_number' is set
        if ($serial_number === null || (is_array($serial_number) && count($serial_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $serial_number when calling energyDataGetDynamicBetweenBySerialNumber20'
            );
        }
        // verify the required parameter 'starttimestamp' is set
        if ($starttimestamp === null || (is_array($starttimestamp) && count($starttimestamp) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $starttimestamp when calling energyDataGetDynamicBetweenBySerialNumber20'
            );
        }
        // verify the required parameter 'endtimestamp' is set
        if ($endtimestamp === null || (is_array($endtimestamp) && count($endtimestamp) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $endtimestamp when calling energyDataGetDynamicBetweenBySerialNumber20'
            );
        }

        $resourcePath = '/Api/v2/EnergyData/{serialNumber}/Dynamic/BySerialNumber/From/{starttimestamp}/To/{endtimestamp}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($serial_number !== null) {
            $resourcePath = str_replace(
                '{' . 'serialNumber' . '}',
                ObjectSerializer::toPathValue($serial_number),
                $resourcePath
            );
        }
        // path params
        if ($starttimestamp !== null) {
            $resourcePath = str_replace(
                '{' . 'starttimestamp' . '}',
                ObjectSerializer::toPathValue($starttimestamp),
                $resourcePath
            );
        }
        // path params
        if ($endtimestamp !== null) {
            $resourcePath = str_replace(
                '{' . 'endtimestamp' . '}',
                ObjectSerializer::toPathValue($endtimestamp),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation energyDataGetDynamicByNmi20
     *
     * Gets dynamic data for a site.
     *
     * @param  string $nmi National Metering Identifier (required)
     * @param  bool $metadata Whether to provide metadata (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResultSingleOfInverterSiteDynamicData
     */
    public function energyDataGetDynamicByNmi20($nmi, $metadata = null)
    {
        list($response) = $this->energyDataGetDynamicByNmi20WithHttpInfo($nmi, $metadata);
        return $response;
    }

    /**
     * Operation energyDataGetDynamicByNmi20WithHttpInfo
     *
     * Gets dynamic data for a site.
     *
     * @param  string $nmi National Metering Identifier (required)
     * @param  bool $metadata Whether to provide metadata (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResultSingleOfInverterSiteDynamicData, HTTP status code, HTTP response headers (array of strings)
     */
    public function energyDataGetDynamicByNmi20WithHttpInfo($nmi, $metadata = null)
    {
        $returnType = '\Swagger\Client\Model\ResultSingleOfInverterSiteDynamicData';
        $request = $this->energyDataGetDynamicByNmi20Request($nmi, $metadata);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResultSingleOfInverterSiteDynamicData',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation energyDataGetDynamicByNmi20Async
     *
     * Gets dynamic data for a site.
     *
     * @param  string $nmi National Metering Identifier (required)
     * @param  bool $metadata Whether to provide metadata (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function energyDataGetDynamicByNmi20Async($nmi, $metadata = null)
    {
        return $this->energyDataGetDynamicByNmi20AsyncWithHttpInfo($nmi, $metadata)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation energyDataGetDynamicByNmi20AsyncWithHttpInfo
     *
     * Gets dynamic data for a site.
     *
     * @param  string $nmi National Metering Identifier (required)
     * @param  bool $metadata Whether to provide metadata (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function energyDataGetDynamicByNmi20AsyncWithHttpInfo($nmi, $metadata = null)
    {
        $returnType = '\Swagger\Client\Model\ResultSingleOfInverterSiteDynamicData';
        $request = $this->energyDataGetDynamicByNmi20Request($nmi, $metadata);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'energyDataGetDynamicByNmi20'
     *
     * @param  string $nmi National Metering Identifier (required)
     * @param  bool $metadata Whether to provide metadata (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function energyDataGetDynamicByNmi20Request($nmi, $metadata = null)
    {
        // verify the required parameter 'nmi' is set
        if ($nmi === null || (is_array($nmi) && count($nmi) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nmi when calling energyDataGetDynamicByNmi20'
            );
        }

        $resourcePath = '/Api/v2/EnergyData/{nmi}/DynamicByNmi';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($metadata !== null) {
            $queryParams['metadata'] = ObjectSerializer::toQueryValue($metadata, null);
        }

        // path params
        if ($nmi !== null) {
            $resourcePath = str_replace(
                '{' . 'nmi' . '}',
                ObjectSerializer::toPathValue($nmi),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation energyDataGetDynamicByNmi202
     *
     * Gets dynamic data for multiple sites. Maximum 100 per request.
     *
     * @param  string[] $body NMIs of the sites (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResultMultipleOfInverterSiteDynamicData
     */
    public function energyDataGetDynamicByNmi202($body)
    {
        list($response) = $this->energyDataGetDynamicByNmi202WithHttpInfo($body);
        return $response;
    }

    /**
     * Operation energyDataGetDynamicByNmi202WithHttpInfo
     *
     * Gets dynamic data for multiple sites. Maximum 100 per request.
     *
     * @param  string[] $body NMIs of the sites (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResultMultipleOfInverterSiteDynamicData, HTTP status code, HTTP response headers (array of strings)
     */
    public function energyDataGetDynamicByNmi202WithHttpInfo($body)
    {
        $returnType = '\Swagger\Client\Model\ResultMultipleOfInverterSiteDynamicData';
        $request = $this->energyDataGetDynamicByNmi202Request($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResultMultipleOfInverterSiteDynamicData',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation energyDataGetDynamicByNmi202Async
     *
     * Gets dynamic data for multiple sites. Maximum 100 per request.
     *
     * @param  string[] $body NMIs of the sites (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function energyDataGetDynamicByNmi202Async($body)
    {
        return $this->energyDataGetDynamicByNmi202AsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation energyDataGetDynamicByNmi202AsyncWithHttpInfo
     *
     * Gets dynamic data for multiple sites. Maximum 100 per request.
     *
     * @param  string[] $body NMIs of the sites (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function energyDataGetDynamicByNmi202AsyncWithHttpInfo($body)
    {
        $returnType = '\Swagger\Client\Model\ResultMultipleOfInverterSiteDynamicData';
        $request = $this->energyDataGetDynamicByNmi202Request($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'energyDataGetDynamicByNmi202'
     *
     * @param  string[] $body NMIs of the sites (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function energyDataGetDynamicByNmi202Request($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling energyDataGetDynamicByNmi202'
            );
        }

        $resourcePath = '/Api/v2/EnergyData/Multiple/DynamicByNmi';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation energyDataGetDynamicBySerialNumber20
     *
     * Gets dynamic data for a serialNumber.
     *
     * @param  string $serial_number Serial number (required)
     * @param  bool $metadata Whether to provide metadata (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResultSingleOfInverterSiteDynamicData
     */
    public function energyDataGetDynamicBySerialNumber20($serial_number, $metadata = null)
    {
        list($response) = $this->energyDataGetDynamicBySerialNumber20WithHttpInfo($serial_number, $metadata);
        return $response;
    }

    /**
     * Operation energyDataGetDynamicBySerialNumber20WithHttpInfo
     *
     * Gets dynamic data for a serialNumber.
     *
     * @param  string $serial_number Serial number (required)
     * @param  bool $metadata Whether to provide metadata (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResultSingleOfInverterSiteDynamicData, HTTP status code, HTTP response headers (array of strings)
     */
    public function energyDataGetDynamicBySerialNumber20WithHttpInfo($serial_number, $metadata = null)
    {
        $returnType = '\Swagger\Client\Model\ResultSingleOfInverterSiteDynamicData';
        $request = $this->energyDataGetDynamicBySerialNumber20Request($serial_number, $metadata);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResultSingleOfInverterSiteDynamicData',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation energyDataGetDynamicBySerialNumber20Async
     *
     * Gets dynamic data for a serialNumber.
     *
     * @param  string $serial_number Serial number (required)
     * @param  bool $metadata Whether to provide metadata (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function energyDataGetDynamicBySerialNumber20Async($serial_number, $metadata = null)
    {
        return $this->energyDataGetDynamicBySerialNumber20AsyncWithHttpInfo($serial_number, $metadata)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation energyDataGetDynamicBySerialNumber20AsyncWithHttpInfo
     *
     * Gets dynamic data for a serialNumber.
     *
     * @param  string $serial_number Serial number (required)
     * @param  bool $metadata Whether to provide metadata (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function energyDataGetDynamicBySerialNumber20AsyncWithHttpInfo($serial_number, $metadata = null)
    {
        $returnType = '\Swagger\Client\Model\ResultSingleOfInverterSiteDynamicData';
        $request = $this->energyDataGetDynamicBySerialNumber20Request($serial_number, $metadata);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'energyDataGetDynamicBySerialNumber20'
     *
     * @param  string $serial_number Serial number (required)
     * @param  bool $metadata Whether to provide metadata (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function energyDataGetDynamicBySerialNumber20Request($serial_number, $metadata = null)
    {
        // verify the required parameter 'serial_number' is set
        if ($serial_number === null || (is_array($serial_number) && count($serial_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $serial_number when calling energyDataGetDynamicBySerialNumber20'
            );
        }

        $resourcePath = '/Api/v2/EnergyData/Dynamic/BySerialNumber/{serialNumber}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($metadata !== null) {
            $queryParams['metadata'] = ObjectSerializer::toQueryValue($metadata, null);
        }

        // path params
        if ($serial_number !== null) {
            $resourcePath = str_replace(
                '{' . 'serialNumber' . '}',
                ObjectSerializer::toPathValue($serial_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation energyDataGetDynamicInPeriod20
     *
     * Gets dynamic data records for a site before a timestamp.
     *
     * @param  string $site_id Id of the site (required)
     * @param  string $timestamp Utc timestamp in the &#x27;yyyyMMddTHHmmssZ&#x27; format (required)
     * @param  int $period_in_minutes Period in minutes to scan, maximum is 60 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResultMultipleOfInverterSiteDynamicData
     */
    public function energyDataGetDynamicInPeriod20($site_id, $timestamp, $period_in_minutes)
    {
        list($response) = $this->energyDataGetDynamicInPeriod20WithHttpInfo($site_id, $timestamp, $period_in_minutes);
        return $response;
    }

    /**
     * Operation energyDataGetDynamicInPeriod20WithHttpInfo
     *
     * Gets dynamic data records for a site before a timestamp.
     *
     * @param  string $site_id Id of the site (required)
     * @param  string $timestamp Utc timestamp in the &#x27;yyyyMMddTHHmmssZ&#x27; format (required)
     * @param  int $period_in_minutes Period in minutes to scan, maximum is 60 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResultMultipleOfInverterSiteDynamicData, HTTP status code, HTTP response headers (array of strings)
     */
    public function energyDataGetDynamicInPeriod20WithHttpInfo($site_id, $timestamp, $period_in_minutes)
    {
        $returnType = '\Swagger\Client\Model\ResultMultipleOfInverterSiteDynamicData';
        $request = $this->energyDataGetDynamicInPeriod20Request($site_id, $timestamp, $period_in_minutes);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResultMultipleOfInverterSiteDynamicData',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation energyDataGetDynamicInPeriod20Async
     *
     * Gets dynamic data records for a site before a timestamp.
     *
     * @param  string $site_id Id of the site (required)
     * @param  string $timestamp Utc timestamp in the &#x27;yyyyMMddTHHmmssZ&#x27; format (required)
     * @param  int $period_in_minutes Period in minutes to scan, maximum is 60 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function energyDataGetDynamicInPeriod20Async($site_id, $timestamp, $period_in_minutes)
    {
        return $this->energyDataGetDynamicInPeriod20AsyncWithHttpInfo($site_id, $timestamp, $period_in_minutes)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation energyDataGetDynamicInPeriod20AsyncWithHttpInfo
     *
     * Gets dynamic data records for a site before a timestamp.
     *
     * @param  string $site_id Id of the site (required)
     * @param  string $timestamp Utc timestamp in the &#x27;yyyyMMddTHHmmssZ&#x27; format (required)
     * @param  int $period_in_minutes Period in minutes to scan, maximum is 60 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function energyDataGetDynamicInPeriod20AsyncWithHttpInfo($site_id, $timestamp, $period_in_minutes)
    {
        $returnType = '\Swagger\Client\Model\ResultMultipleOfInverterSiteDynamicData';
        $request = $this->energyDataGetDynamicInPeriod20Request($site_id, $timestamp, $period_in_minutes);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'energyDataGetDynamicInPeriod20'
     *
     * @param  string $site_id Id of the site (required)
     * @param  string $timestamp Utc timestamp in the &#x27;yyyyMMddTHHmmssZ&#x27; format (required)
     * @param  int $period_in_minutes Period in minutes to scan, maximum is 60 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function energyDataGetDynamicInPeriod20Request($site_id, $timestamp, $period_in_minutes)
    {
        // verify the required parameter 'site_id' is set
        if ($site_id === null || (is_array($site_id) && count($site_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $site_id when calling energyDataGetDynamicInPeriod20'
            );
        }
        // verify the required parameter 'timestamp' is set
        if ($timestamp === null || (is_array($timestamp) && count($timestamp) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $timestamp when calling energyDataGetDynamicInPeriod20'
            );
        }
        // verify the required parameter 'period_in_minutes' is set
        if ($period_in_minutes === null || (is_array($period_in_minutes) && count($period_in_minutes) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $period_in_minutes when calling energyDataGetDynamicInPeriod20'
            );
        }

        $resourcePath = '/Api/v2/EnergyData/{siteId}/Dynamic/PeriodBeforeUtc/{timestamp}/{periodInMinutes}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($site_id !== null) {
            $resourcePath = str_replace(
                '{' . 'siteId' . '}',
                ObjectSerializer::toPathValue($site_id),
                $resourcePath
            );
        }
        // path params
        if ($timestamp !== null) {
            $resourcePath = str_replace(
                '{' . 'timestamp' . '}',
                ObjectSerializer::toPathValue($timestamp),
                $resourcePath
            );
        }
        // path params
        if ($period_in_minutes !== null) {
            $resourcePath = str_replace(
                '{' . 'periodInMinutes' . '}',
                ObjectSerializer::toPathValue($period_in_minutes),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation energyDataGetDynamicInPeriodByNmi20
     *
     * Gets dynamic data records before a timestamp.
     *
     * @param  string $nmi National Metering Identifier (required)
     * @param  string $timestamp Utc timestamp in the &#x27;yyyyMMddTHHmmssZ&#x27; format (required)
     * @param  int $period_in_minutes Period in minutes to scan, maximum is 60 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResultMultipleOfInverterSiteDynamicData
     */
    public function energyDataGetDynamicInPeriodByNmi20($nmi, $timestamp, $period_in_minutes)
    {
        list($response) = $this->energyDataGetDynamicInPeriodByNmi20WithHttpInfo($nmi, $timestamp, $period_in_minutes);
        return $response;
    }

    /**
     * Operation energyDataGetDynamicInPeriodByNmi20WithHttpInfo
     *
     * Gets dynamic data records before a timestamp.
     *
     * @param  string $nmi National Metering Identifier (required)
     * @param  string $timestamp Utc timestamp in the &#x27;yyyyMMddTHHmmssZ&#x27; format (required)
     * @param  int $period_in_minutes Period in minutes to scan, maximum is 60 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResultMultipleOfInverterSiteDynamicData, HTTP status code, HTTP response headers (array of strings)
     */
    public function energyDataGetDynamicInPeriodByNmi20WithHttpInfo($nmi, $timestamp, $period_in_minutes)
    {
        $returnType = '\Swagger\Client\Model\ResultMultipleOfInverterSiteDynamicData';
        $request = $this->energyDataGetDynamicInPeriodByNmi20Request($nmi, $timestamp, $period_in_minutes);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResultMultipleOfInverterSiteDynamicData',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation energyDataGetDynamicInPeriodByNmi20Async
     *
     * Gets dynamic data records before a timestamp.
     *
     * @param  string $nmi National Metering Identifier (required)
     * @param  string $timestamp Utc timestamp in the &#x27;yyyyMMddTHHmmssZ&#x27; format (required)
     * @param  int $period_in_minutes Period in minutes to scan, maximum is 60 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function energyDataGetDynamicInPeriodByNmi20Async($nmi, $timestamp, $period_in_minutes)
    {
        return $this->energyDataGetDynamicInPeriodByNmi20AsyncWithHttpInfo($nmi, $timestamp, $period_in_minutes)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation energyDataGetDynamicInPeriodByNmi20AsyncWithHttpInfo
     *
     * Gets dynamic data records before a timestamp.
     *
     * @param  string $nmi National Metering Identifier (required)
     * @param  string $timestamp Utc timestamp in the &#x27;yyyyMMddTHHmmssZ&#x27; format (required)
     * @param  int $period_in_minutes Period in minutes to scan, maximum is 60 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function energyDataGetDynamicInPeriodByNmi20AsyncWithHttpInfo($nmi, $timestamp, $period_in_minutes)
    {
        $returnType = '\Swagger\Client\Model\ResultMultipleOfInverterSiteDynamicData';
        $request = $this->energyDataGetDynamicInPeriodByNmi20Request($nmi, $timestamp, $period_in_minutes);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'energyDataGetDynamicInPeriodByNmi20'
     *
     * @param  string $nmi National Metering Identifier (required)
     * @param  string $timestamp Utc timestamp in the &#x27;yyyyMMddTHHmmssZ&#x27; format (required)
     * @param  int $period_in_minutes Period in minutes to scan, maximum is 60 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function energyDataGetDynamicInPeriodByNmi20Request($nmi, $timestamp, $period_in_minutes)
    {
        // verify the required parameter 'nmi' is set
        if ($nmi === null || (is_array($nmi) && count($nmi) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nmi when calling energyDataGetDynamicInPeriodByNmi20'
            );
        }
        // verify the required parameter 'timestamp' is set
        if ($timestamp === null || (is_array($timestamp) && count($timestamp) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $timestamp when calling energyDataGetDynamicInPeriodByNmi20'
            );
        }
        // verify the required parameter 'period_in_minutes' is set
        if ($period_in_minutes === null || (is_array($period_in_minutes) && count($period_in_minutes) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $period_in_minutes when calling energyDataGetDynamicInPeriodByNmi20'
            );
        }

        $resourcePath = '/Api/v2/EnergyData/{nmi}/Dynamic/PeriodBeforeUtcByNmi/{timestamp}/{periodInMinutes}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($nmi !== null) {
            $resourcePath = str_replace(
                '{' . 'nmi' . '}',
                ObjectSerializer::toPathValue($nmi),
                $resourcePath
            );
        }
        // path params
        if ($timestamp !== null) {
            $resourcePath = str_replace(
                '{' . 'timestamp' . '}',
                ObjectSerializer::toPathValue($timestamp),
                $resourcePath
            );
        }
        // path params
        if ($period_in_minutes !== null) {
            $resourcePath = str_replace(
                '{' . 'periodInMinutes' . '}',
                ObjectSerializer::toPathValue($period_in_minutes),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation energyDataGetDynamicInPeriodBySerialNumber20
     *
     * Gets dynamic data records before a timestamp.
     *
     * @param  string $serial_number Serial number (required)
     * @param  string $timestamp Utc timestamp in the &#x27;yyyyMMddTHHmmssZ&#x27; format (required)
     * @param  int $period_in_minutes Period in minutes to scan, maximum is 60 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResultMultipleOfInverterSiteDynamicData
     */
    public function energyDataGetDynamicInPeriodBySerialNumber20($serial_number, $timestamp, $period_in_minutes)
    {
        list($response) = $this->energyDataGetDynamicInPeriodBySerialNumber20WithHttpInfo($serial_number, $timestamp, $period_in_minutes);
        return $response;
    }

    /**
     * Operation energyDataGetDynamicInPeriodBySerialNumber20WithHttpInfo
     *
     * Gets dynamic data records before a timestamp.
     *
     * @param  string $serial_number Serial number (required)
     * @param  string $timestamp Utc timestamp in the &#x27;yyyyMMddTHHmmssZ&#x27; format (required)
     * @param  int $period_in_minutes Period in minutes to scan, maximum is 60 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResultMultipleOfInverterSiteDynamicData, HTTP status code, HTTP response headers (array of strings)
     */
    public function energyDataGetDynamicInPeriodBySerialNumber20WithHttpInfo($serial_number, $timestamp, $period_in_minutes)
    {
        $returnType = '\Swagger\Client\Model\ResultMultipleOfInverterSiteDynamicData';
        $request = $this->energyDataGetDynamicInPeriodBySerialNumber20Request($serial_number, $timestamp, $period_in_minutes);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResultMultipleOfInverterSiteDynamicData',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation energyDataGetDynamicInPeriodBySerialNumber20Async
     *
     * Gets dynamic data records before a timestamp.
     *
     * @param  string $serial_number Serial number (required)
     * @param  string $timestamp Utc timestamp in the &#x27;yyyyMMddTHHmmssZ&#x27; format (required)
     * @param  int $period_in_minutes Period in minutes to scan, maximum is 60 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function energyDataGetDynamicInPeriodBySerialNumber20Async($serial_number, $timestamp, $period_in_minutes)
    {
        return $this->energyDataGetDynamicInPeriodBySerialNumber20AsyncWithHttpInfo($serial_number, $timestamp, $period_in_minutes)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation energyDataGetDynamicInPeriodBySerialNumber20AsyncWithHttpInfo
     *
     * Gets dynamic data records before a timestamp.
     *
     * @param  string $serial_number Serial number (required)
     * @param  string $timestamp Utc timestamp in the &#x27;yyyyMMddTHHmmssZ&#x27; format (required)
     * @param  int $period_in_minutes Period in minutes to scan, maximum is 60 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function energyDataGetDynamicInPeriodBySerialNumber20AsyncWithHttpInfo($serial_number, $timestamp, $period_in_minutes)
    {
        $returnType = '\Swagger\Client\Model\ResultMultipleOfInverterSiteDynamicData';
        $request = $this->energyDataGetDynamicInPeriodBySerialNumber20Request($serial_number, $timestamp, $period_in_minutes);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'energyDataGetDynamicInPeriodBySerialNumber20'
     *
     * @param  string $serial_number Serial number (required)
     * @param  string $timestamp Utc timestamp in the &#x27;yyyyMMddTHHmmssZ&#x27; format (required)
     * @param  int $period_in_minutes Period in minutes to scan, maximum is 60 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function energyDataGetDynamicInPeriodBySerialNumber20Request($serial_number, $timestamp, $period_in_minutes)
    {
        // verify the required parameter 'serial_number' is set
        if ($serial_number === null || (is_array($serial_number) && count($serial_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $serial_number when calling energyDataGetDynamicInPeriodBySerialNumber20'
            );
        }
        // verify the required parameter 'timestamp' is set
        if ($timestamp === null || (is_array($timestamp) && count($timestamp) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $timestamp when calling energyDataGetDynamicInPeriodBySerialNumber20'
            );
        }
        // verify the required parameter 'period_in_minutes' is set
        if ($period_in_minutes === null || (is_array($period_in_minutes) && count($period_in_minutes) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $period_in_minutes when calling energyDataGetDynamicInPeriodBySerialNumber20'
            );
        }

        $resourcePath = '/Api/v2/EnergyData/{serialNumber}/Dynamic/BySerialNumber/PeriodBeforeUtc/{timestamp}/{periodInMinutes}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($serial_number !== null) {
            $resourcePath = str_replace(
                '{' . 'serialNumber' . '}',
                ObjectSerializer::toPathValue($serial_number),
                $resourcePath
            );
        }
        // path params
        if ($timestamp !== null) {
            $resourcePath = str_replace(
                '{' . 'timestamp' . '}',
                ObjectSerializer::toPathValue($timestamp),
                $resourcePath
            );
        }
        // path params
        if ($period_in_minutes !== null) {
            $resourcePath = str_replace(
                '{' . 'periodInMinutes' . '}',
                ObjectSerializer::toPathValue($period_in_minutes),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation energyDataGetDynamicLatestBeforeByNmi20
     *
     * Gets latest dynamic data for a site before given timestamp.
     *
     * @param  string $nmi National Metering Identifier (required)
     * @param  string $timestamp Utc timestamp in the &#x27;yyyyMMddTHHmmssZ&#x27; format (required)
     * @param  int $period_in_minutes Period in minutes to scan, maximum is 60 (required)
     * @param  bool $metadata Provide metadata or not (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResultSingleWithTimeTravelOfInverterSiteDynamicData
     */
    public function energyDataGetDynamicLatestBeforeByNmi20($nmi, $timestamp, $period_in_minutes, $metadata = null)
    {
        list($response) = $this->energyDataGetDynamicLatestBeforeByNmi20WithHttpInfo($nmi, $timestamp, $period_in_minutes, $metadata);
        return $response;
    }

    /**
     * Operation energyDataGetDynamicLatestBeforeByNmi20WithHttpInfo
     *
     * Gets latest dynamic data for a site before given timestamp.
     *
     * @param  string $nmi National Metering Identifier (required)
     * @param  string $timestamp Utc timestamp in the &#x27;yyyyMMddTHHmmssZ&#x27; format (required)
     * @param  int $period_in_minutes Period in minutes to scan, maximum is 60 (required)
     * @param  bool $metadata Provide metadata or not (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResultSingleWithTimeTravelOfInverterSiteDynamicData, HTTP status code, HTTP response headers (array of strings)
     */
    public function energyDataGetDynamicLatestBeforeByNmi20WithHttpInfo($nmi, $timestamp, $period_in_minutes, $metadata = null)
    {
        $returnType = '\Swagger\Client\Model\ResultSingleWithTimeTravelOfInverterSiteDynamicData';
        $request = $this->energyDataGetDynamicLatestBeforeByNmi20Request($nmi, $timestamp, $period_in_minutes, $metadata);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResultSingleWithTimeTravelOfInverterSiteDynamicData',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation energyDataGetDynamicLatestBeforeByNmi20Async
     *
     * Gets latest dynamic data for a site before given timestamp.
     *
     * @param  string $nmi National Metering Identifier (required)
     * @param  string $timestamp Utc timestamp in the &#x27;yyyyMMddTHHmmssZ&#x27; format (required)
     * @param  int $period_in_minutes Period in minutes to scan, maximum is 60 (required)
     * @param  bool $metadata Provide metadata or not (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function energyDataGetDynamicLatestBeforeByNmi20Async($nmi, $timestamp, $period_in_minutes, $metadata = null)
    {
        return $this->energyDataGetDynamicLatestBeforeByNmi20AsyncWithHttpInfo($nmi, $timestamp, $period_in_minutes, $metadata)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation energyDataGetDynamicLatestBeforeByNmi20AsyncWithHttpInfo
     *
     * Gets latest dynamic data for a site before given timestamp.
     *
     * @param  string $nmi National Metering Identifier (required)
     * @param  string $timestamp Utc timestamp in the &#x27;yyyyMMddTHHmmssZ&#x27; format (required)
     * @param  int $period_in_minutes Period in minutes to scan, maximum is 60 (required)
     * @param  bool $metadata Provide metadata or not (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function energyDataGetDynamicLatestBeforeByNmi20AsyncWithHttpInfo($nmi, $timestamp, $period_in_minutes, $metadata = null)
    {
        $returnType = '\Swagger\Client\Model\ResultSingleWithTimeTravelOfInverterSiteDynamicData';
        $request = $this->energyDataGetDynamicLatestBeforeByNmi20Request($nmi, $timestamp, $period_in_minutes, $metadata);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'energyDataGetDynamicLatestBeforeByNmi20'
     *
     * @param  string $nmi National Metering Identifier (required)
     * @param  string $timestamp Utc timestamp in the &#x27;yyyyMMddTHHmmssZ&#x27; format (required)
     * @param  int $period_in_minutes Period in minutes to scan, maximum is 60 (required)
     * @param  bool $metadata Provide metadata or not (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function energyDataGetDynamicLatestBeforeByNmi20Request($nmi, $timestamp, $period_in_minutes, $metadata = null)
    {
        // verify the required parameter 'nmi' is set
        if ($nmi === null || (is_array($nmi) && count($nmi) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nmi when calling energyDataGetDynamicLatestBeforeByNmi20'
            );
        }
        // verify the required parameter 'timestamp' is set
        if ($timestamp === null || (is_array($timestamp) && count($timestamp) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $timestamp when calling energyDataGetDynamicLatestBeforeByNmi20'
            );
        }
        // verify the required parameter 'period_in_minutes' is set
        if ($period_in_minutes === null || (is_array($period_in_minutes) && count($period_in_minutes) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $period_in_minutes when calling energyDataGetDynamicLatestBeforeByNmi20'
            );
        }

        $resourcePath = '/Api/v2/EnergyData/{nmi}/Dynamic/LatestBeforeUtcByNmi/{timestamp}/{periodInMinutes}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($metadata !== null) {
            $queryParams['metadata'] = ObjectSerializer::toQueryValue($metadata, null);
        }

        // path params
        if ($nmi !== null) {
            $resourcePath = str_replace(
                '{' . 'nmi' . '}',
                ObjectSerializer::toPathValue($nmi),
                $resourcePath
            );
        }
        // path params
        if ($timestamp !== null) {
            $resourcePath = str_replace(
                '{' . 'timestamp' . '}',
                ObjectSerializer::toPathValue($timestamp),
                $resourcePath
            );
        }
        // path params
        if ($period_in_minutes !== null) {
            $resourcePath = str_replace(
                '{' . 'periodInMinutes' . '}',
                ObjectSerializer::toPathValue($period_in_minutes),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation energyDataGetDynamicLatestBeforeBySerialNumber20
     *
     * Gets latest dynamic data for an inverter before given timestamp.
     *
     * @param  string $serial_number Serial number (required)
     * @param  string $timestamp Utc timestamp in the &#x27;yyyyMMddTHHmmssZ&#x27; format (required)
     * @param  int $period_in_minutes Period in minutes to scan, maximum is 60 (required)
     * @param  bool $metadata Provide metadata or not (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResultSingleWithTimeTravelOfInverterSiteDynamicData
     */
    public function energyDataGetDynamicLatestBeforeBySerialNumber20($serial_number, $timestamp, $period_in_minutes, $metadata = null)
    {
        list($response) = $this->energyDataGetDynamicLatestBeforeBySerialNumber20WithHttpInfo($serial_number, $timestamp, $period_in_minutes, $metadata);
        return $response;
    }

    /**
     * Operation energyDataGetDynamicLatestBeforeBySerialNumber20WithHttpInfo
     *
     * Gets latest dynamic data for an inverter before given timestamp.
     *
     * @param  string $serial_number Serial number (required)
     * @param  string $timestamp Utc timestamp in the &#x27;yyyyMMddTHHmmssZ&#x27; format (required)
     * @param  int $period_in_minutes Period in minutes to scan, maximum is 60 (required)
     * @param  bool $metadata Provide metadata or not (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResultSingleWithTimeTravelOfInverterSiteDynamicData, HTTP status code, HTTP response headers (array of strings)
     */
    public function energyDataGetDynamicLatestBeforeBySerialNumber20WithHttpInfo($serial_number, $timestamp, $period_in_minutes, $metadata = null)
    {
        $returnType = '\Swagger\Client\Model\ResultSingleWithTimeTravelOfInverterSiteDynamicData';
        $request = $this->energyDataGetDynamicLatestBeforeBySerialNumber20Request($serial_number, $timestamp, $period_in_minutes, $metadata);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResultSingleWithTimeTravelOfInverterSiteDynamicData',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation energyDataGetDynamicLatestBeforeBySerialNumber20Async
     *
     * Gets latest dynamic data for an inverter before given timestamp.
     *
     * @param  string $serial_number Serial number (required)
     * @param  string $timestamp Utc timestamp in the &#x27;yyyyMMddTHHmmssZ&#x27; format (required)
     * @param  int $period_in_minutes Period in minutes to scan, maximum is 60 (required)
     * @param  bool $metadata Provide metadata or not (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function energyDataGetDynamicLatestBeforeBySerialNumber20Async($serial_number, $timestamp, $period_in_minutes, $metadata = null)
    {
        return $this->energyDataGetDynamicLatestBeforeBySerialNumber20AsyncWithHttpInfo($serial_number, $timestamp, $period_in_minutes, $metadata)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation energyDataGetDynamicLatestBeforeBySerialNumber20AsyncWithHttpInfo
     *
     * Gets latest dynamic data for an inverter before given timestamp.
     *
     * @param  string $serial_number Serial number (required)
     * @param  string $timestamp Utc timestamp in the &#x27;yyyyMMddTHHmmssZ&#x27; format (required)
     * @param  int $period_in_minutes Period in minutes to scan, maximum is 60 (required)
     * @param  bool $metadata Provide metadata or not (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function energyDataGetDynamicLatestBeforeBySerialNumber20AsyncWithHttpInfo($serial_number, $timestamp, $period_in_minutes, $metadata = null)
    {
        $returnType = '\Swagger\Client\Model\ResultSingleWithTimeTravelOfInverterSiteDynamicData';
        $request = $this->energyDataGetDynamicLatestBeforeBySerialNumber20Request($serial_number, $timestamp, $period_in_minutes, $metadata);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'energyDataGetDynamicLatestBeforeBySerialNumber20'
     *
     * @param  string $serial_number Serial number (required)
     * @param  string $timestamp Utc timestamp in the &#x27;yyyyMMddTHHmmssZ&#x27; format (required)
     * @param  int $period_in_minutes Period in minutes to scan, maximum is 60 (required)
     * @param  bool $metadata Provide metadata or not (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function energyDataGetDynamicLatestBeforeBySerialNumber20Request($serial_number, $timestamp, $period_in_minutes, $metadata = null)
    {
        // verify the required parameter 'serial_number' is set
        if ($serial_number === null || (is_array($serial_number) && count($serial_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $serial_number when calling energyDataGetDynamicLatestBeforeBySerialNumber20'
            );
        }
        // verify the required parameter 'timestamp' is set
        if ($timestamp === null || (is_array($timestamp) && count($timestamp) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $timestamp when calling energyDataGetDynamicLatestBeforeBySerialNumber20'
            );
        }
        // verify the required parameter 'period_in_minutes' is set
        if ($period_in_minutes === null || (is_array($period_in_minutes) && count($period_in_minutes) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $period_in_minutes when calling energyDataGetDynamicLatestBeforeBySerialNumber20'
            );
        }

        $resourcePath = '/Api/v2/EnergyData/{serialNumber}/Dynamic/BySerialNumber/LatestBeforeUtc/{timestamp}/{periodInMinutes}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($metadata !== null) {
            $queryParams['metadata'] = ObjectSerializer::toQueryValue($metadata, null);
        }

        // path params
        if ($serial_number !== null) {
            $resourcePath = str_replace(
                '{' . 'serialNumber' . '}',
                ObjectSerializer::toPathValue($serial_number),
                $resourcePath
            );
        }
        // path params
        if ($timestamp !== null) {
            $resourcePath = str_replace(
                '{' . 'timestamp' . '}',
                ObjectSerializer::toPathValue($timestamp),
                $resourcePath
            );
        }
        // path params
        if ($period_in_minutes !== null) {
            $resourcePath = str_replace(
                '{' . 'periodInMinutes' . '}',
                ObjectSerializer::toPathValue($period_in_minutes),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation energyDataGetDynamicMultiple20
     *
     * Gets dynamic data for multiple sites. Maximum 100 per request.
     *
     * @param  string[] $body Ids of the sites (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResultMultipleOfInverterSiteDynamicData
     */
    public function energyDataGetDynamicMultiple20($body)
    {
        list($response) = $this->energyDataGetDynamicMultiple20WithHttpInfo($body);
        return $response;
    }

    /**
     * Operation energyDataGetDynamicMultiple20WithHttpInfo
     *
     * Gets dynamic data for multiple sites. Maximum 100 per request.
     *
     * @param  string[] $body Ids of the sites (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResultMultipleOfInverterSiteDynamicData, HTTP status code, HTTP response headers (array of strings)
     */
    public function energyDataGetDynamicMultiple20WithHttpInfo($body)
    {
        $returnType = '\Swagger\Client\Model\ResultMultipleOfInverterSiteDynamicData';
        $request = $this->energyDataGetDynamicMultiple20Request($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResultMultipleOfInverterSiteDynamicData',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation energyDataGetDynamicMultiple20Async
     *
     * Gets dynamic data for multiple sites. Maximum 100 per request.
     *
     * @param  string[] $body Ids of the sites (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function energyDataGetDynamicMultiple20Async($body)
    {
        return $this->energyDataGetDynamicMultiple20AsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation energyDataGetDynamicMultiple20AsyncWithHttpInfo
     *
     * Gets dynamic data for multiple sites. Maximum 100 per request.
     *
     * @param  string[] $body Ids of the sites (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function energyDataGetDynamicMultiple20AsyncWithHttpInfo($body)
    {
        $returnType = '\Swagger\Client\Model\ResultMultipleOfInverterSiteDynamicData';
        $request = $this->energyDataGetDynamicMultiple20Request($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'energyDataGetDynamicMultiple20'
     *
     * @param  string[] $body Ids of the sites (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function energyDataGetDynamicMultiple20Request($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling energyDataGetDynamicMultiple20'
            );
        }

        $resourcePath = '/Api/v2/EnergyData/Multiple/Dynamic';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation energyDataGetDynamicMultipleBySerialNumber20
     *
     * Gets dynamic data for multiple serial numbers. Maximum 100 per request.
     *
     * @param  string[] $body Serial numbers (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResultMultipleOfInverterSiteDynamicData
     */
    public function energyDataGetDynamicMultipleBySerialNumber20($body)
    {
        list($response) = $this->energyDataGetDynamicMultipleBySerialNumber20WithHttpInfo($body);
        return $response;
    }

    /**
     * Operation energyDataGetDynamicMultipleBySerialNumber20WithHttpInfo
     *
     * Gets dynamic data for multiple serial numbers. Maximum 100 per request.
     *
     * @param  string[] $body Serial numbers (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResultMultipleOfInverterSiteDynamicData, HTTP status code, HTTP response headers (array of strings)
     */
    public function energyDataGetDynamicMultipleBySerialNumber20WithHttpInfo($body)
    {
        $returnType = '\Swagger\Client\Model\ResultMultipleOfInverterSiteDynamicData';
        $request = $this->energyDataGetDynamicMultipleBySerialNumber20Request($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResultMultipleOfInverterSiteDynamicData',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation energyDataGetDynamicMultipleBySerialNumber20Async
     *
     * Gets dynamic data for multiple serial numbers. Maximum 100 per request.
     *
     * @param  string[] $body Serial numbers (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function energyDataGetDynamicMultipleBySerialNumber20Async($body)
    {
        return $this->energyDataGetDynamicMultipleBySerialNumber20AsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation energyDataGetDynamicMultipleBySerialNumber20AsyncWithHttpInfo
     *
     * Gets dynamic data for multiple serial numbers. Maximum 100 per request.
     *
     * @param  string[] $body Serial numbers (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function energyDataGetDynamicMultipleBySerialNumber20AsyncWithHttpInfo($body)
    {
        $returnType = '\Swagger\Client\Model\ResultMultipleOfInverterSiteDynamicData';
        $request = $this->energyDataGetDynamicMultipleBySerialNumber20Request($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'energyDataGetDynamicMultipleBySerialNumber20'
     *
     * @param  string[] $body Serial numbers (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function energyDataGetDynamicMultipleBySerialNumber20Request($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling energyDataGetDynamicMultipleBySerialNumber20'
            );
        }

        $resourcePath = '/Api/v2/EnergyData/Multiple/BySerialNumber/Dynamic';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation energyDataGetStatic
     *
     * Gets static data for a site.
     *
     * @param  string $site_id Id of the site (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResultSingleOfStaticOnlyView
     */
    public function energyDataGetStatic($site_id)
    {
        list($response) = $this->energyDataGetStaticWithHttpInfo($site_id);
        return $response;
    }

    /**
     * Operation energyDataGetStaticWithHttpInfo
     *
     * Gets static data for a site.
     *
     * @param  string $site_id Id of the site (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResultSingleOfStaticOnlyView, HTTP status code, HTTP response headers (array of strings)
     */
    public function energyDataGetStaticWithHttpInfo($site_id)
    {
        $returnType = '\Swagger\Client\Model\ResultSingleOfStaticOnlyView';
        $request = $this->energyDataGetStaticRequest($site_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResultSingleOfStaticOnlyView',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation energyDataGetStaticAsync
     *
     * Gets static data for a site.
     *
     * @param  string $site_id Id of the site (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function energyDataGetStaticAsync($site_id)
    {
        return $this->energyDataGetStaticAsyncWithHttpInfo($site_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation energyDataGetStaticAsyncWithHttpInfo
     *
     * Gets static data for a site.
     *
     * @param  string $site_id Id of the site (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function energyDataGetStaticAsyncWithHttpInfo($site_id)
    {
        $returnType = '\Swagger\Client\Model\ResultSingleOfStaticOnlyView';
        $request = $this->energyDataGetStaticRequest($site_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'energyDataGetStatic'
     *
     * @param  string $site_id Id of the site (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function energyDataGetStaticRequest($site_id)
    {
        // verify the required parameter 'site_id' is set
        if ($site_id === null || (is_array($site_id) && count($site_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $site_id when calling energyDataGetStatic'
            );
        }

        $resourcePath = '/Api/v2/EnergyData/{siteId}/Static';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($site_id !== null) {
            $resourcePath = str_replace(
                '{' . 'siteId' . '}',
                ObjectSerializer::toPathValue($site_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation energyDataGetStaticByNmi
     *
     * Gets static data for a site.
     *
     * @param  string $nmi National Metering Identifier (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResultSingleOfStaticOnlyView
     */
    public function energyDataGetStaticByNmi($nmi)
    {
        list($response) = $this->energyDataGetStaticByNmiWithHttpInfo($nmi);
        return $response;
    }

    /**
     * Operation energyDataGetStaticByNmiWithHttpInfo
     *
     * Gets static data for a site.
     *
     * @param  string $nmi National Metering Identifier (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResultSingleOfStaticOnlyView, HTTP status code, HTTP response headers (array of strings)
     */
    public function energyDataGetStaticByNmiWithHttpInfo($nmi)
    {
        $returnType = '\Swagger\Client\Model\ResultSingleOfStaticOnlyView';
        $request = $this->energyDataGetStaticByNmiRequest($nmi);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResultSingleOfStaticOnlyView',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation energyDataGetStaticByNmiAsync
     *
     * Gets static data for a site.
     *
     * @param  string $nmi National Metering Identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function energyDataGetStaticByNmiAsync($nmi)
    {
        return $this->energyDataGetStaticByNmiAsyncWithHttpInfo($nmi)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation energyDataGetStaticByNmiAsyncWithHttpInfo
     *
     * Gets static data for a site.
     *
     * @param  string $nmi National Metering Identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function energyDataGetStaticByNmiAsyncWithHttpInfo($nmi)
    {
        $returnType = '\Swagger\Client\Model\ResultSingleOfStaticOnlyView';
        $request = $this->energyDataGetStaticByNmiRequest($nmi);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'energyDataGetStaticByNmi'
     *
     * @param  string $nmi National Metering Identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function energyDataGetStaticByNmiRequest($nmi)
    {
        // verify the required parameter 'nmi' is set
        if ($nmi === null || (is_array($nmi) && count($nmi) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nmi when calling energyDataGetStaticByNmi'
            );
        }

        $resourcePath = '/Api/v2/EnergyData/{nmi}/StaticByNmi';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($nmi !== null) {
            $resourcePath = str_replace(
                '{' . 'nmi' . '}',
                ObjectSerializer::toPathValue($nmi),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation energyDataGetStaticBySerialNumber
     *
     * Gets static data for an inverter.
     *
     * @param  string $serial_number Serial number (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResultSingleOfStaticOnlyView
     */
    public function energyDataGetStaticBySerialNumber($serial_number)
    {
        list($response) = $this->energyDataGetStaticBySerialNumberWithHttpInfo($serial_number);
        return $response;
    }

    /**
     * Operation energyDataGetStaticBySerialNumberWithHttpInfo
     *
     * Gets static data for an inverter.
     *
     * @param  string $serial_number Serial number (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResultSingleOfStaticOnlyView, HTTP status code, HTTP response headers (array of strings)
     */
    public function energyDataGetStaticBySerialNumberWithHttpInfo($serial_number)
    {
        $returnType = '\Swagger\Client\Model\ResultSingleOfStaticOnlyView';
        $request = $this->energyDataGetStaticBySerialNumberRequest($serial_number);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResultSingleOfStaticOnlyView',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation energyDataGetStaticBySerialNumberAsync
     *
     * Gets static data for an inverter.
     *
     * @param  string $serial_number Serial number (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function energyDataGetStaticBySerialNumberAsync($serial_number)
    {
        return $this->energyDataGetStaticBySerialNumberAsyncWithHttpInfo($serial_number)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation energyDataGetStaticBySerialNumberAsyncWithHttpInfo
     *
     * Gets static data for an inverter.
     *
     * @param  string $serial_number Serial number (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function energyDataGetStaticBySerialNumberAsyncWithHttpInfo($serial_number)
    {
        $returnType = '\Swagger\Client\Model\ResultSingleOfStaticOnlyView';
        $request = $this->energyDataGetStaticBySerialNumberRequest($serial_number);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'energyDataGetStaticBySerialNumber'
     *
     * @param  string $serial_number Serial number (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function energyDataGetStaticBySerialNumberRequest($serial_number)
    {
        // verify the required parameter 'serial_number' is set
        if ($serial_number === null || (is_array($serial_number) && count($serial_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $serial_number when calling energyDataGetStaticBySerialNumber'
            );
        }

        $resourcePath = '/Api/v2/EnergyData/Static/BySerialNumber/{serialNumber}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($serial_number !== null) {
            $resourcePath = str_replace(
                '{' . 'serialNumber' . '}',
                ObjectSerializer::toPathValue($serial_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation energyDataGetWithLayout
     *
     * Gets available sites.
     *
     * @param  int $page Zero based page id (optional, default to 0)
     * @param  int $page_size Size of the page. Max &#x3D; 1000 (optional, default to 100)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResultPagedOfEnergyNodeSimple
     */
    public function energyDataGetWithLayout($page = '0', $page_size = '100')
    {
        list($response) = $this->energyDataGetWithLayoutWithHttpInfo($page, $page_size);
        return $response;
    }

    /**
     * Operation energyDataGetWithLayoutWithHttpInfo
     *
     * Gets available sites.
     *
     * @param  int $page Zero based page id (optional, default to 0)
     * @param  int $page_size Size of the page. Max &#x3D; 1000 (optional, default to 100)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResultPagedOfEnergyNodeSimple, HTTP status code, HTTP response headers (array of strings)
     */
    public function energyDataGetWithLayoutWithHttpInfo($page = '0', $page_size = '100')
    {
        $returnType = '\Swagger\Client\Model\ResultPagedOfEnergyNodeSimple';
        $request = $this->energyDataGetWithLayoutRequest($page, $page_size);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResultPagedOfEnergyNodeSimple',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation energyDataGetWithLayoutAsync
     *
     * Gets available sites.
     *
     * @param  int $page Zero based page id (optional, default to 0)
     * @param  int $page_size Size of the page. Max &#x3D; 1000 (optional, default to 100)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function energyDataGetWithLayoutAsync($page = '0', $page_size = '100')
    {
        return $this->energyDataGetWithLayoutAsyncWithHttpInfo($page, $page_size)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation energyDataGetWithLayoutAsyncWithHttpInfo
     *
     * Gets available sites.
     *
     * @param  int $page Zero based page id (optional, default to 0)
     * @param  int $page_size Size of the page. Max &#x3D; 1000 (optional, default to 100)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function energyDataGetWithLayoutAsyncWithHttpInfo($page = '0', $page_size = '100')
    {
        $returnType = '\Swagger\Client\Model\ResultPagedOfEnergyNodeSimple';
        $request = $this->energyDataGetWithLayoutRequest($page, $page_size);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'energyDataGetWithLayout'
     *
     * @param  int $page Zero based page id (optional, default to 0)
     * @param  int $page_size Size of the page. Max &#x3D; 1000 (optional, default to 100)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function energyDataGetWithLayoutRequest($page = '0', $page_size = '100')
    {

        $resourcePath = '/Api/v2/EnergyData/With/Nodes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page, 'int32');
        }
        // query params
        if ($page_size !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($page_size, 'int32');
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
